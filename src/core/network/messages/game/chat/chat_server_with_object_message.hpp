//  Generated by desperion protocol_builder

#ifndef core_chat_server_with_object_message_hpp
#define core_chat_server_with_object_message_hpp

namespace network
{
    struct chat_server_with_object_message : chat_server_message
    {
        std::vector<object_item_ptr> objects;
        
        int16_t id() const override
        { return 883; } 
        
        chat_server_with_object_message(const int32_t & sender_id, const std::string & sender_name, const int32_t & sender_account_id, const int8_t & channel, const std::string & content, const int32_t & timestamp, const std::string & fingerprint, const std::vector<object_item_ptr> & objects) : chat_server_message { sender_id,sender_name,sender_account_id,channel,content,timestamp,fingerprint }
        {
            _data << static_cast<int16_t>(objects.size());
            for (auto && i : objects)
                _data << i->buffer();
        }
        
        chat_server_with_object_message(byte_buffer & data) : chat_server_message { data }
        {
            int16_t objects_size;
            data >> objects_size;
            objects.resize(objects_size);
            for (int16_t i = 0; i < objects_size; ++i)
                objects[i] = std::make_unique<object_item>(data);
        }
    };
}

#endif
