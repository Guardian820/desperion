//  Generated by desperion protocol_builder

#ifndef core_party_member_informations_hpp
#define core_party_member_informations_hpp

namespace network
{
    struct party_member_informations : character_base_informations
    {
        int32_t life_points;
        int32_t max_life_points;
        int16_t prospecting;
        int8_t regen_rate;
        int16_t initiative;
        int8_t alignment_side;
        int16_t world_x;
        int16_t world_y;
        int32_t map_id;
        int16_t sub_area_id;
        player_status_ptr status;
        
        int16_t id() const override
        { return 90; } 
        
        party_member_informations(const int8_t & breed, const bool & sex, const entity_look_ptr & entity_look, const int8_t & level, const std::string & name, const int32_t & id, const int32_t & life_points, const int32_t & max_life_points, const int16_t & prospecting, const int8_t & regen_rate, const int16_t & initiative, const int8_t & alignment_side, const int16_t & world_x, const int16_t & world_y, const int32_t & map_id, const int16_t & sub_area_id, const player_status_ptr & status) : character_base_informations { breed,sex,entity_look,level,name,id }
        {
            _data << life_points;
            _data << max_life_points;
            _data << prospecting;
            _data << regen_rate;
            _data << initiative;
            _data << alignment_side;
            _data << world_x;
            _data << world_y;
            _data << map_id;
            _data << sub_area_id;
            _data << status->id() << status->buffer();
        }
        
        party_member_informations(byte_buffer & data) : character_base_informations { data }
        {
            data >> life_points;
            data >> max_life_points;
            data >> prospecting;
            data >> regen_rate;
            data >> initiative;
            data >> alignment_side;
            data >> world_x;
            data >> world_y;
            data >> map_id;
            data >> sub_area_id;
            int16_t status_id;
            data >> status_id;
            status.reset(type_manager::get_player_status(status_id, data));
        }
    };
    
    using party_member_informations_ptr = std::unique_ptr<party_member_informations>;
}

#endif
