//  Generated by desperion protocol_builder

#ifndef core_house_informations_for_guild_hpp
#define core_house_informations_for_guild_hpp

namespace network
{
    struct house_informations_for_guild : dofus_unit
    {
        int32_t house_id;
        int32_t model_id;
        std::string owner_name;
        int16_t world_x;
        int16_t world_y;
        int32_t map_id;
        int16_t sub_area_id;
        std::vector<int32_t> skill_list_ids;
        unsigned_int_ptr guildshare_params;
        
        int16_t id() const override
        { return 170; } 
        
        house_informations_for_guild(const int32_t & house_id, const int32_t & model_id, const std::string & owner_name, const int16_t & world_x, const int16_t & world_y, const int32_t & map_id, const int16_t & sub_area_id, const std::vector<int32_t> & skill_list_ids, const unsigned_int_ptr & guildshare_params)
        {
            _data << house_id;
            _data << model_id;
            _data << owner_name;
            _data << world_x;
            _data << world_y;
            _data << map_id;
            _data << sub_area_id;
            _data << static_cast<int16_t>(skill_list_ids.size());
            for (auto && i : skill_list_ids)
                _data << i;
            _data << guildshare_params->buffer();
        }
        
        house_informations_for_guild(byte_buffer & data)
        {
            data >> house_id;
            data >> model_id;
            data >> owner_name;
            data >> world_x;
            data >> world_y;
            data >> map_id;
            data >> sub_area_id;
            int16_t skill_list_ids_size;
            data >> skill_list_ids_size;
            skill_list_ids.resize(skill_list_ids_size);
            for (int16_t i = 0; i < skill_list_ids_size; ++i)
                data >> skill_list_ids[i];
            guildshare_params = std::make_unique<unsigned_int>(data);
        }
    };
    
    using house_informations_for_guild_ptr = std::unique_ptr<house_informations_for_guild>;
}

#endif
