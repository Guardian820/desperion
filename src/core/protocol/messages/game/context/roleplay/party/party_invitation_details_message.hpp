//  Generated by desperion protocol_builder

#ifndef core_party_invitation_details_message_hpp
#define core_party_invitation_details_message_hpp

namespace network
{
    struct party_invitation_details_message : abstract_party_message
    {
        int8_t party_type;
        int32_t from_id;
        std::string from_name;
        int32_t leader_id;
        std::vector<party_invitation_member_informations_ptr> members;
        std::vector<party_guest_informations_ptr> guests;
        
        int16_t id() const override
        { return 6263; } 
        
        party_invitation_details_message(const int32_t & party_id, const int8_t & party_type, const int32_t & from_id, const std::string & from_name, const int32_t & leader_id, const std::vector<party_invitation_member_informations_ptr> & members, const std::vector<party_guest_informations_ptr> & guests) : abstract_party_message { party_id }
        {
            _data << party_type;
            _data << from_id;
            _data << from_name;
            _data << leader_id;
            _data << static_cast<int16_t>(members.size());
            for (auto && i : members)
                _data << i->buffer();
            _data << static_cast<int16_t>(guests.size());
            for (auto && i : guests)
                _data << i->buffer();
        }
        
        party_invitation_details_message(byte_buffer & data) : abstract_party_message { data }
        {
            data >> party_type;
            data >> from_id;
            data >> from_name;
            data >> leader_id;
            int16_t members_size;
            data >> members_size;
            members.resize(members_size);
            for (int16_t i = 0; i < members_size; ++i)
                members[i] = std::make_unique<party_invitation_member_informations>(data);
            int16_t guests_size;
            data >> guests_size;
            guests.resize(guests_size);
            for (int16_t i = 0; i < guests_size; ++i)
                guests[i] = std::make_unique<party_guest_informations>(data);
        }
    };
}

#endif
