//  Generated by desperion protocol_builder

#ifndef core_party_join_message_hpp
#define core_party_join_message_hpp

namespace protocol
{
    struct party_join_message : abstract_party_message
    {
        int8_t party_type;
        int32_t party_leader_id;
        int8_t max_participants;
        std::vector<party_member_informations_ptr> members;
        std::vector<party_guest_informations_ptr> guests;
        bool restricted;
        
        int16_t id() const override
        { return 5576; } 
        
        party_join_message(const int32_t & party_id, const int8_t & party_type, const int32_t & party_leader_id, const int8_t & max_participants, const std::vector<party_member_informations_ptr> & members, const std::vector<party_guest_informations_ptr> & guests, const bool & restricted) : abstract_party_message { party_id }
        {
            _data << party_type;
            _data << party_leader_id;
            _data << max_participants;
            _data << static_cast<int16_t>(members.size());
            for (auto && i : members)
                _data << i->id() << i->buffer();
            _data << static_cast<int16_t>(guests.size());
            for (auto && i : guests)
                _data << i->buffer();
            _data << restricted;
        }
        
        party_join_message(byte_buffer & data) : abstract_party_message { data }
        {
            data >> party_type;
            data >> party_leader_id;
            data >> max_participants;
            int16_t members_size;
            data >> members_size;
            members.resize(members_size);
            for (int16_t i = 0; i < members_size; ++i)
            {
                int16_t p;
                data >> p;
                members[i].reset(type_manager::get_party_member_informations(p, data));
            }
            int16_t guests_size;
            data >> guests_size;
            guests.resize(guests_size);
            for (int16_t i = 0; i < guests_size; ++i)
                guests[i] = std::make_unique<party_guest_informations>(data);
            data >> restricted;
        }
    };
}

#endif
