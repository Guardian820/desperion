//  Generated by desperion protocol_builder

#ifndef core_quest_list_message_hpp
#define core_quest_list_message_hpp

namespace protocol
{
    struct quest_list_message : dofus_unit
    {
        std::vector<int16_t> finished_quests_ids;
        std::vector<int16_t> finished_quests_counts;
        std::vector<quest_active_informations_ptr> active_quests;
        
        int16_t id() const override
        { return 5626; } 
        
        quest_list_message(const std::vector<int16_t> & finished_quests_ids, const std::vector<int16_t> & finished_quests_counts, const std::vector<quest_active_informations_ptr> & active_quests)
        {
            _data << static_cast<int16_t>(finished_quests_ids.size());
            for (auto && i : finished_quests_ids)
                _data << i;
            _data << static_cast<int16_t>(finished_quests_counts.size());
            for (auto && i : finished_quests_counts)
                _data << i;
            _data << static_cast<int16_t>(active_quests.size());
            for (auto && i : active_quests)
                _data << i->id() << i->buffer();
        }
        
        quest_list_message(byte_buffer & data)
        {
            int16_t finished_quests_ids_size;
            data >> finished_quests_ids_size;
            finished_quests_ids.resize(finished_quests_ids_size);
            for (int16_t i = 0; i < finished_quests_ids_size; ++i)
                data >> finished_quests_ids[i];
            int16_t finished_quests_counts_size;
            data >> finished_quests_counts_size;
            finished_quests_counts.resize(finished_quests_counts_size);
            for (int16_t i = 0; i < finished_quests_counts_size; ++i)
                data >> finished_quests_counts[i];
            int16_t active_quests_size;
            data >> active_quests_size;
            active_quests.resize(active_quests_size);
            for (int16_t i = 0; i < active_quests_size; ++i)
            {
                int16_t p;
                data >> p;
                active_quests[i].reset(type_manager::get_quest_active_informations(p, data));
            }
        }
    };
}

#endif
