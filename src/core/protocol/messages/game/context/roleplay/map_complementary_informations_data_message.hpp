//  Generated by desperion protocol_builder

#ifndef core_map_complementary_informations_data_message_hpp
#define core_map_complementary_informations_data_message_hpp

namespace protocol
{
    struct map_complementary_informations_data_message : dofus_unit
    {
        int16_t sub_area_id;
        int32_t map_id;
        std::vector<house_informations_ptr> houses;
        std::vector<game_role_play_actor_informations_ptr> actors;
        std::vector<interactive_element_ptr> interactive_elements;
        std::vector<stated_element_ptr> stated_elements;
        std::vector<map_obstacle_ptr> obstacles;
        std::vector<fight_common_informations_ptr> fights;
        
        int16_t id() const override
        { return 226; } 
        
        map_complementary_informations_data_message(const int16_t & sub_area_id, const int32_t & map_id, const std::vector<house_informations_ptr> & houses, const std::vector<game_role_play_actor_informations_ptr> & actors, const std::vector<interactive_element_ptr> & interactive_elements, const std::vector<stated_element_ptr> & stated_elements, const std::vector<map_obstacle_ptr> & obstacles, const std::vector<fight_common_informations_ptr> & fights)
        {
            _data << sub_area_id;
            _data << map_id;
            _data << static_cast<int16_t>(houses.size());
            for (auto && i : houses)
                _data << i->id() << i->buffer();
            _data << static_cast<int16_t>(actors.size());
            for (auto && i : actors)
                _data << i->id() << i->buffer();
            _data << static_cast<int16_t>(interactive_elements.size());
            for (auto && i : interactive_elements)
                _data << i->id() << i->buffer();
            _data << static_cast<int16_t>(stated_elements.size());
            for (auto && i : stated_elements)
                _data << i->buffer();
            _data << static_cast<int16_t>(obstacles.size());
            for (auto && i : obstacles)
                _data << i->buffer();
            _data << static_cast<int16_t>(fights.size());
            for (auto && i : fights)
                _data << i->buffer();
        }
        
        map_complementary_informations_data_message(byte_buffer & data)
        {
            data >> sub_area_id;
            data >> map_id;
            int16_t houses_size;
            data >> houses_size;
            houses.resize(houses_size);
            for (int16_t i = 0; i < houses_size; ++i)
            {
                int16_t p;
                data >> p;
                houses[i].reset(type_manager::get_house_informations(p, data));
            }
            int16_t actors_size;
            data >> actors_size;
            actors.resize(actors_size);
            for (int16_t i = 0; i < actors_size; ++i)
            {
                int16_t p;
                data >> p;
                actors[i].reset(type_manager::get_game_role_play_actor_informations(p, data));
            }
            int16_t interactive_elements_size;
            data >> interactive_elements_size;
            interactive_elements.resize(interactive_elements_size);
            for (int16_t i = 0; i < interactive_elements_size; ++i)
            {
                int16_t p;
                data >> p;
                interactive_elements[i].reset(type_manager::get_interactive_element(p, data));
            }
            int16_t stated_elements_size;
            data >> stated_elements_size;
            stated_elements.resize(stated_elements_size);
            for (int16_t i = 0; i < stated_elements_size; ++i)
                stated_elements[i] = std::make_unique<stated_element>(data);
            int16_t obstacles_size;
            data >> obstacles_size;
            obstacles.resize(obstacles_size);
            for (int16_t i = 0; i < obstacles_size; ++i)
                obstacles[i] = std::make_unique<map_obstacle>(data);
            int16_t fights_size;
            data >> fights_size;
            fights.resize(fights_size);
            for (int16_t i = 0; i < fights_size; ++i)
                fights[i] = std::make_unique<fight_common_informations>(data);
        }
    };
}

#endif
