//  Generated by desperion protocol_builder

#ifndef core_basic_who_is_message_hpp
#define core_basic_who_is_message_hpp

namespace protocol
{
    struct basic_who_is_message : dofus_unit
    {
        bool self;
        bool verbose;
        int8_t position;
        std::string account_nickname;
        int32_t account_id;
        std::string player_name;
        int32_t player_id;
        int16_t area_id;
        std::vector<abstract_social_group_infos_ptr> social_groups;
        int8_t player_state;
        
        int16_t id() const override
        { return 180; } 
        
        basic_who_is_message(const bool & self, const bool & verbose, const int8_t & position, const std::string & account_nickname, const int32_t & account_id, const std::string & player_name, const int32_t & player_id, const int16_t & area_id, const std::vector<abstract_social_group_infos_ptr> & social_groups, const int8_t & player_state)
        {
            int8_t flag = 0;
            set_bool_flag(flag, 0, self);
            set_bool_flag(flag, 1, verbose);
            _data << flag;
            _data << position;
            _data << account_nickname;
            _data << account_id;
            _data << player_name;
            _data << player_id;
            _data << area_id;
            _data << static_cast<int16_t>(social_groups.size());
            for (auto && i : social_groups)
                _data << i->id() << i->buffer();
            _data << player_state;
        }
        
        basic_who_is_message(byte_buffer & data)
        {
            int8_t flag;
            data >> flag;
            self = get_bool_flag(flag, 0);
            verbose = get_bool_flag(flag, 1);
            data >> position;
            data >> account_nickname;
            data >> account_id;
            data >> player_name;
            data >> player_id;
            data >> area_id;
            int16_t social_groups_size;
            data >> social_groups_size;
            social_groups.resize(social_groups_size);
            for (int16_t i = 0; i < social_groups_size; ++i)
            {
                int16_t p;
                data >> p;
                social_groups[i].reset(type_manager::get_abstract_social_group_infos(p, data));
            }
            data >> player_state;
        }
    };
}

#endif
