//  Generated by desperion protocol_builder

#ifndef core_characters_list_with_modifications_message_hpp
#define core_characters_list_with_modifications_message_hpp

namespace protocol
{
    struct characters_list_with_modifications_message : characters_list_message
    {
        std::vector<character_to_recolor_information_ptr> characters_to_recolor;
        std::vector<int32_t> characters_to_rename;
        std::vector<int32_t> unusable_characters;
        std::vector<character_to_relook_information_ptr> characters_to_relook;
        
        int16_t id() const override
        { return 6120; } 
        
        characters_list_with_modifications_message(const bool & has_startup_actions, const std::vector<character_base_informations_ptr> & characters, const std::vector<character_to_recolor_information_ptr> & characters_to_recolor, const std::vector<int32_t> & characters_to_rename, const std::vector<int32_t> & unusable_characters, const std::vector<character_to_relook_information_ptr> & characters_to_relook) : characters_list_message { has_startup_actions,characters }
        {
            _data << static_cast<int16_t>(characters_to_recolor.size());
            for (auto && i : characters_to_recolor)
                _data << i->buffer();
            _data << static_cast<int16_t>(characters_to_rename.size());
            for (auto && i : characters_to_rename)
                _data << i;
            _data << static_cast<int16_t>(unusable_characters.size());
            for (auto && i : unusable_characters)
                _data << i;
            _data << static_cast<int16_t>(characters_to_relook.size());
            for (auto && i : characters_to_relook)
                _data << i->buffer();
        }
        
        characters_list_with_modifications_message(byte_buffer & data) : characters_list_message { data }
        {
            int16_t characters_to_recolor_size;
            data >> characters_to_recolor_size;
            characters_to_recolor.resize(characters_to_recolor_size);
            for (int16_t i = 0; i < characters_to_recolor_size; ++i)
                characters_to_recolor[i] = std::make_unique<character_to_recolor_information>(data);
            int16_t characters_to_rename_size;
            data >> characters_to_rename_size;
            characters_to_rename.resize(characters_to_rename_size);
            for (int16_t i = 0; i < characters_to_rename_size; ++i)
                data >> characters_to_rename[i];
            int16_t unusable_characters_size;
            data >> unusable_characters_size;
            unusable_characters.resize(unusable_characters_size);
            for (int16_t i = 0; i < unusable_characters_size; ++i)
                data >> unusable_characters[i];
            int16_t characters_to_relook_size;
            data >> characters_to_relook_size;
            characters_to_relook.resize(characters_to_relook_size);
            for (int16_t i = 0; i < characters_to_relook_size; ++i)
                characters_to_relook[i] = std::make_unique<character_to_relook_information>(data);
        }
    };
}

#endif
