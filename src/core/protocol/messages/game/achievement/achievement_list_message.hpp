//  Generated by desperion protocol_builder

#ifndef core_achievement_list_message_hpp
#define core_achievement_list_message_hpp

namespace protocol
{
    struct achievement_list_message : dofus_unit
    {
        std::vector<int16_t> finished_achievements_ids;
        std::vector<achievement_rewardable_ptr> rewardable_achievements;
        
        int16_t id() const override
        { return 6205; } 
        
        achievement_list_message(const std::vector<int16_t> & finished_achievements_ids, const std::vector<achievement_rewardable_ptr> & rewardable_achievements)
        {
            _data << static_cast<int16_t>(finished_achievements_ids.size());
            for (auto && i : finished_achievements_ids)
                _data << i;
            _data << static_cast<int16_t>(rewardable_achievements.size());
            for (auto && i : rewardable_achievements)
                _data << i->buffer();
        }
        
        achievement_list_message(byte_buffer & data)
        {
            int16_t finished_achievements_ids_size;
            data >> finished_achievements_ids_size;
            finished_achievements_ids.resize(finished_achievements_ids_size);
            for (int16_t i = 0; i < finished_achievements_ids_size; ++i)
                data >> finished_achievements_ids[i];
            int16_t rewardable_achievements_size;
            data >> rewardable_achievements_size;
            rewardable_achievements.resize(rewardable_achievements_size);
            for (int16_t i = 0; i < rewardable_achievements_size; ++i)
                rewardable_achievements[i] = std::make_unique<achievement_rewardable>(data);
        }
    };
}

#endif
