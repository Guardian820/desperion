//  Generated by desperion protocol_builder

#ifndef core_tax_collector_list_message_hpp
#define core_tax_collector_list_message_hpp

namespace network
{
    struct tax_collector_list_message : dofus_unit
    {
        int8_t nbcollector_max;
        int16_t tax_collector_hire_cost;
        std::vector<tax_collector_informations_ptr> informations;
        std::vector<tax_collector_fighters_information_ptr> fighters_informations;
        
        int16_t id() const override
        { return 5930; } 
        
        tax_collector_list_message(const int8_t & nbcollector_max, const int16_t & tax_collector_hire_cost, const std::vector<tax_collector_informations_ptr> & informations, const std::vector<tax_collector_fighters_information_ptr> & fighters_informations)
        {
            _data << nbcollector_max;
            _data << tax_collector_hire_cost;
            _data << static_cast<int16_t>(informations.size());
            for (auto && i : informations)
                _data << i->id() << i->buffer();
            _data << static_cast<int16_t>(fighters_informations.size());
            for (auto && i : fighters_informations)
                _data << i->buffer();
        }
        
        tax_collector_list_message(byte_buffer & data)
        {
            data >> nbcollector_max;
            data >> tax_collector_hire_cost;
            int16_t informations_size;
            data >> informations_size;
            informations.resize(informations_size);
            for (int16_t i = 0; i < informations_size; ++i)
            {
                int16_t p;
                data >> p;
                informations[i].reset(type_manager::get_tax_collector_informations(p, data));
            }
            int16_t fighters_informations_size;
            data >> fighters_informations_size;
            fighters_informations.resize(fighters_informations_size);
            for (int16_t i = 0; i < fighters_informations_size; ++i)
                fighters_informations[i] = std::make_unique<tax_collector_fighters_information>(data);
        }
    };
}

#endif
