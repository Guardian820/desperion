//  Generated by desperion protocol_builder

#ifndef core_guild_infos_upgrade_message_hpp
#define core_guild_infos_upgrade_message_hpp

namespace network
{
    struct guild_infos_upgrade_message : dofus_unit
    {
        int8_t max_tax_collectors_count;
        int8_t tax_collectors_count;
        int16_t tax_collector_life_points;
        int16_t tax_collector_damages_bonuses;
        int16_t tax_collector_pods;
        int16_t tax_collector_prospecting;
        int16_t tax_collector_wisdom;
        int16_t boost_points;
        std::vector<int16_t> spell_id;
        std::vector<int8_t> spell_level;
        
        int16_t id() const override
        { return 5636; } 
        
        guild_infos_upgrade_message(const int8_t & max_tax_collectors_count, const int8_t & tax_collectors_count, const int16_t & tax_collector_life_points, const int16_t & tax_collector_damages_bonuses, const int16_t & tax_collector_pods, const int16_t & tax_collector_prospecting, const int16_t & tax_collector_wisdom, const int16_t & boost_points, const std::vector<int16_t> & spell_id, const std::vector<int8_t> & spell_level)
        {
            _data << max_tax_collectors_count;
            _data << tax_collectors_count;
            _data << tax_collector_life_points;
            _data << tax_collector_damages_bonuses;
            _data << tax_collector_pods;
            _data << tax_collector_prospecting;
            _data << tax_collector_wisdom;
            _data << boost_points;
            _data << static_cast<int16_t>(spell_id.size());
            for (auto && i : spell_id)
                _data << i;
            _data << spell_level;
        }
        
        guild_infos_upgrade_message(byte_buffer & data)
        {
            data >> max_tax_collectors_count;
            data >> tax_collectors_count;
            data >> tax_collector_life_points;
            data >> tax_collector_damages_bonuses;
            data >> tax_collector_pods;
            data >> tax_collector_prospecting;
            data >> tax_collector_wisdom;
            data >> boost_points;
            int16_t spell_id_size;
            data >> spell_id_size;
            spell_id.resize(spell_id_size);
            for (int16_t i = 0; i < spell_id_size; ++i)
                data >> spell_id[i];
            data >> spell_level;
        }
    };
}

#endif
