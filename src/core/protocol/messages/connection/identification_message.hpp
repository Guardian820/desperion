//  Generated by desperion protocol_builder

#ifndef core_identification_message_hpp
#define core_identification_message_hpp

namespace protocol
{
    struct identification_message : dofus_unit
    {
        bool autoconnect;
        bool use_certificate;
        bool use_login_token;
        version_extended_ptr version;
        std::string lang;
        std::vector<uint8_t> credentials;
        int16_t server_id;
        double session_optional_salt;
        
        int16_t id() const override
        { return 4; } 
        
        identification_message(const bool & autoconnect, const bool & use_certificate, const bool & use_login_token, const version_extended_ptr & version, const std::string & lang, const std::vector<uint8_t> & credentials, const int16_t & server_id, const double & session_optional_salt)
        {
            int8_t flag = 0;
            set_bool_flag(flag, 0, autoconnect);
            set_bool_flag(flag, 1, use_certificate);
            set_bool_flag(flag, 2, use_login_token);
            _data << flag;
            _data << version->buffer();
            _data << lang;
            _data << credentials;
            _data << server_id;
            _data << session_optional_salt;
        }
        
        identification_message(byte_buffer & data)
        {
            int8_t flag;
            data >> flag;
            autoconnect = get_bool_flag(flag, 0);
            use_certificate = get_bool_flag(flag, 1);
            use_login_token = get_bool_flag(flag, 2);
            version = std::make_unique<version_extended>(data);
            data >> lang;
            data >> credentials;
            data >> server_id;
            data >> session_optional_salt;
        }
    };
}

#endif
