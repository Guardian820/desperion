//  Generated by desperion protocol_builder

#ifndef core_achievement_hpp
#define core_achievement_hpp

namespace network
{
    struct achievement : dofus_unit
    {
        int16_t id;
        std::vector<achievement_objective_ptr> finished_objective;
        std::vector<achievement_started_objective_ptr> started_objectives;
        
        int16_t id() const override
        { return 363; } 
        
        achievement(const int16_t & id, const std::vector<achievement_objective_ptr> & finished_objective, const std::vector<achievement_started_objective_ptr> & started_objectives)
        {
            _data << id;
            _data << static_cast<int16_t>(finished_objective.size());
            for (auto && i : finished_objective)
                _data << i->buffer();
            _data << static_cast<int16_t>(started_objectives.size());
            for (auto && i : started_objectives)
                _data << i->buffer();
        }
        
        achievement(byte_buffer & data)
        {
            data >> id;
            int16_t finished_objective_size;
            data >> finished_objective_size;
            finished_objective.resize(finished_objective_size);
            for (int16_t i = 0; i < finished_objective_size; ++i)
                finished_objective[i] = std::make_unique<achievement_objective>(data);
            int16_t started_objectives_size;
            data >> started_objectives_size;
            started_objectives.resize(started_objectives_size);
            for (int16_t i = 0; i < started_objectives_size; ++i)
                started_objectives[i] = std::make_unique<achievement_started_objective>(data);
        }
    };
    
    using achievement_ptr = std::unique_ptr<achievement>;
}

#endif
