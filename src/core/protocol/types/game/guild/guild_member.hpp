//  Generated by desperion protocol_builder

#ifndef core_guild_member_hpp
#define core_guild_member_hpp

namespace protocol
{
    struct guild_member : character_minimal_informations
    {
        int8_t breed;
        bool sex;
        int16_t rank;
        double given_experience;
        int8_t experience_given_percent;
        unsigned_int_ptr rights;
        int8_t connected;
        int8_t alignment_side;
        int16_t hours_since_last_connection;
        int8_t mood_smiley_id;
        int32_t account_id;
        int32_t achievement_points;
        player_status_ptr status;
        
        int16_t id() const override
        { return 88; } 
        
        guild_member(const int8_t & level, const std::string & name, const int32_t & id, const int8_t & breed, const bool & sex, const int16_t & rank, const double & given_experience, const int8_t & experience_given_percent, const unsigned_int_ptr & rights, const int8_t & connected, const int8_t & alignment_side, const int16_t & hours_since_last_connection, const int8_t & mood_smiley_id, const int32_t & account_id, const int32_t & achievement_points, const player_status_ptr & status) : character_minimal_informations { level,name,id }
        {
            _data << breed;
            _data << sex;
            _data << rank;
            _data << given_experience;
            _data << experience_given_percent;
            _data << rights->buffer();
            _data << connected;
            _data << alignment_side;
            _data << hours_since_last_connection;
            _data << mood_smiley_id;
            _data << account_id;
            _data << achievement_points;
            _data << status->id() << status->buffer();
        }
        
        guild_member(byte_buffer & data) : character_minimal_informations { data }
        {
            data >> breed;
            data >> sex;
            data >> rank;
            data >> given_experience;
            data >> experience_given_percent;
            rights = std::make_unique<unsigned_int>(data);
            data >> connected;
            data >> alignment_side;
            data >> hours_since_last_connection;
            data >> mood_smiley_id;
            data >> account_id;
            data >> achievement_points;
            int16_t status_id;
            data >> status_id;
            status.reset(type_manager::get_player_status(status_id, data));
        }
    };
    
    using guild_member_ptr = std::unique_ptr<guild_member>;
}

#endif
