//  Generated by desperion protocol_builder

#ifndef core_mount_client_data_hpp
#define core_mount_client_data_hpp

namespace protocol
{
    struct mount_client_data : dofus_unit
    {
        bool sex;
        bool is_rideable;
        bool is_wild;
        bool is_fecondation_ready;
        double id;
        int32_t model;
        std::vector<int32_t> ancestor;
        std::vector<int32_t> behaviors;
        std::string name;
        int32_t owner_id;
        double experience;
        double experience_for_level;
        double experience_for_next_level;
        int8_t level;
        int32_t max_pods;
        int32_t stamina;
        int32_t stamina_max;
        int32_t maturity;
        int32_t maturity_for_adult;
        int32_t energy;
        int32_t energy_max;
        int32_t serenity;
        int32_t aggressivity_max;
        int32_t serenity_max;
        int32_t love;
        int32_t love_max;
        int32_t fecondation_time;
        int32_t boost_limiter;
        double boost_max;
        int32_t reproduction_count;
        int32_t reproduction_count_max;
        std::vector<object_effect_integer_ptr> effect_list;
        
        int16_t id() const override
        { return 178; } 
        
        mount_client_data(const bool & sex, const bool & is_rideable, const bool & is_wild, const bool & is_fecondation_ready, const double & id, const int32_t & model, const std::vector<int32_t> & ancestor, const std::vector<int32_t> & behaviors, const std::string & name, const int32_t & owner_id, const double & experience, const double & experience_for_level, const double & experience_for_next_level, const int8_t & level, const int32_t & max_pods, const int32_t & stamina, const int32_t & stamina_max, const int32_t & maturity, const int32_t & maturity_for_adult, const int32_t & energy, const int32_t & energy_max, const int32_t & serenity, const int32_t & aggressivity_max, const int32_t & serenity_max, const int32_t & love, const int32_t & love_max, const int32_t & fecondation_time, const int32_t & boost_limiter, const double & boost_max, const int32_t & reproduction_count, const int32_t & reproduction_count_max, const std::vector<object_effect_integer_ptr> & effect_list)
        {
            int8_t flag = 0;
            set_bool_flag(flag, 0, sex);
            set_bool_flag(flag, 1, is_rideable);
            set_bool_flag(flag, 2, is_wild);
            set_bool_flag(flag, 3, is_fecondation_ready);
            _data << flag;
            _data << id;
            _data << model;
            _data << static_cast<int16_t>(ancestor.size());
            for (auto && i : ancestor)
                _data << i;
            _data << static_cast<int16_t>(behaviors.size());
            for (auto && i : behaviors)
                _data << i;
            _data << name;
            _data << owner_id;
            _data << experience;
            _data << experience_for_level;
            _data << experience_for_next_level;
            _data << level;
            _data << max_pods;
            _data << stamina;
            _data << stamina_max;
            _data << maturity;
            _data << maturity_for_adult;
            _data << energy;
            _data << energy_max;
            _data << serenity;
            _data << aggressivity_max;
            _data << serenity_max;
            _data << love;
            _data << love_max;
            _data << fecondation_time;
            _data << boost_limiter;
            _data << boost_max;
            _data << reproduction_count;
            _data << reproduction_count_max;
            _data << static_cast<int16_t>(effect_list.size());
            for (auto && i : effect_list)
                _data << i->buffer();
        }
        
        mount_client_data(byte_buffer & data)
        {
            int8_t flag;
            data >> flag;
            sex = get_bool_flag(flag, 0);
            is_rideable = get_bool_flag(flag, 1);
            is_wild = get_bool_flag(flag, 2);
            is_fecondation_ready = get_bool_flag(flag, 3);
            data >> id;
            data >> model;
            int16_t ancestor_size;
            data >> ancestor_size;
            ancestor.resize(ancestor_size);
            for (int16_t i = 0; i < ancestor_size; ++i)
                data >> ancestor[i];
            int16_t behaviors_size;
            data >> behaviors_size;
            behaviors.resize(behaviors_size);
            for (int16_t i = 0; i < behaviors_size; ++i)
                data >> behaviors[i];
            data >> name;
            data >> owner_id;
            data >> experience;
            data >> experience_for_level;
            data >> experience_for_next_level;
            data >> level;
            data >> max_pods;
            data >> stamina;
            data >> stamina_max;
            data >> maturity;
            data >> maturity_for_adult;
            data >> energy;
            data >> energy_max;
            data >> serenity;
            data >> aggressivity_max;
            data >> serenity_max;
            data >> love;
            data >> love_max;
            data >> fecondation_time;
            data >> boost_limiter;
            data >> boost_max;
            data >> reproduction_count;
            data >> reproduction_count_max;
            int16_t effect_list_size;
            data >> effect_list_size;
            effect_list.resize(effect_list_size);
            for (int16_t i = 0; i < effect_list_size; ++i)
                effect_list[i] = std::make_unique<object_effect_integer>(data);
        }
    };
    
    using mount_client_data_ptr = std::unique_ptr<mount_client_data>;
}

#endif
