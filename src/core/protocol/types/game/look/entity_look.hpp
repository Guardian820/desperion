//  Generated by desperion protocol_builder

#ifndef core_entity_look_hpp
#define core_entity_look_hpp

namespace protocol
{
    struct entity_look : dofus_unit
    {
        int16_t bones_id;
        std::vector<int16_t> skins;
        std::vector<int32_t> indexed_colors;
        std::vector<int16_t> scales;
        std::vector<sub_entity_ptr> subentities;
        
        int16_t id() const override
        { return 55; } 
        
        entity_look(const int16_t & bones_id, const std::vector<int16_t> & skins, const std::vector<int32_t> & indexed_colors, const std::vector<int16_t> & scales, const std::vector<sub_entity_ptr> & subentities)
        {
            _data << bones_id;
            _data << static_cast<int16_t>(skins.size());
            for (auto && i : skins)
                _data << i;
            _data << static_cast<int16_t>(indexed_colors.size());
            for (auto && i : indexed_colors)
                _data << i;
            _data << static_cast<int16_t>(scales.size());
            for (auto && i : scales)
                _data << i;
            _data << static_cast<int16_t>(subentities.size());
            for (auto && i : subentities)
                _data << i->buffer();
        }
        
        entity_look(byte_buffer & data)
        {
            data >> bones_id;
            int16_t skins_size;
            data >> skins_size;
            skins.resize(skins_size);
            for (int16_t i = 0; i < skins_size; ++i)
                data >> skins[i];
            int16_t indexed_colors_size;
            data >> indexed_colors_size;
            indexed_colors.resize(indexed_colors_size);
            for (int16_t i = 0; i < indexed_colors_size; ++i)
                data >> indexed_colors[i];
            int16_t scales_size;
            data >> scales_size;
            scales.resize(scales_size);
            for (int16_t i = 0; i < scales_size; ++i)
                data >> scales[i];
            int16_t subentities_size;
            data >> subentities_size;
            subentities.resize(subentities_size);
            for (int16_t i = 0; i < subentities_size; ++i)
                subentities[i] = std::make_unique<sub_entity>(data);
        }
    };
    
    using entity_look_ptr = std::unique_ptr<entity_look>;
}

#endif
