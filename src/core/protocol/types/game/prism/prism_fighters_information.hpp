//  Generated by desperion protocol_builder

#ifndef core_prism_fighters_information_hpp
#define core_prism_fighters_information_hpp

namespace network
{
    struct prism_fighters_information : dofus_unit
    {
        int16_t sub_area_id;
        protected_entity_waiting_for_help_info_ptr waiting_for_help_info;
        std::vector<character_minimal_plus_look_informations_ptr> ally_characters_informations;
        std::vector<character_minimal_plus_look_informations_ptr> enemy_characters_informations;
        
        int16_t id() const override
        { return 443; } 
        
        prism_fighters_information(const int16_t & sub_area_id, const protected_entity_waiting_for_help_info_ptr & waiting_for_help_info, const std::vector<character_minimal_plus_look_informations_ptr> & ally_characters_informations, const std::vector<character_minimal_plus_look_informations_ptr> & enemy_characters_informations)
        {
            _data << sub_area_id;
            _data << waiting_for_help_info->buffer();
            _data << static_cast<int16_t>(ally_characters_informations.size());
            for (auto && i : ally_characters_informations)
                _data << i->id() << i->buffer();
            _data << static_cast<int16_t>(enemy_characters_informations.size());
            for (auto && i : enemy_characters_informations)
                _data << i->id() << i->buffer();
        }
        
        prism_fighters_information(byte_buffer & data)
        {
            data >> sub_area_id;
            waiting_for_help_info = std::make_unique<protected_entity_waiting_for_help_info>(data);
            int16_t ally_characters_informations_size;
            data >> ally_characters_informations_size;
            ally_characters_informations.resize(ally_characters_informations_size);
            for (int16_t i = 0; i < ally_characters_informations_size; ++i)
            {
                int16_t p;
                data >> p;
                ally_characters_informations[i].reset(type_manager::get_character_minimal_plus_look_informations(p, data));
            }
            int16_t enemy_characters_informations_size;
            data >> enemy_characters_informations_size;
            enemy_characters_informations.resize(enemy_characters_informations_size);
            for (int16_t i = 0; i < enemy_characters_informations_size; ++i)
            {
                int16_t p;
                data >> p;
                enemy_characters_informations[i].reset(type_manager::get_character_minimal_plus_look_informations(p, data));
            }
        }
    };
    
    using prism_fighters_information_ptr = std::unique_ptr<prism_fighters_information>;
}

#endif
