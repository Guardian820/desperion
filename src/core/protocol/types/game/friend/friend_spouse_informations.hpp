//  Generated by desperion protocol_builder

#ifndef core_friend_spouse_informations_hpp
#define core_friend_spouse_informations_hpp

namespace protocol
{
    struct friend_spouse_informations : dofus_unit
    {
        int32_t spouse_account_id;
        int32_t spouse_id;
        std::string spouse_name;
        int8_t spouse_level;
        int8_t breed;
        int8_t sex;
        entity_look_ptr spouse_entity_look;
        basic_guild_informations_ptr guild_info;
        int8_t alignment_side;
        
        int16_t id() const override
        { return 77; } 
        
        friend_spouse_informations(const int32_t & spouse_account_id, const int32_t & spouse_id, const std::string & spouse_name, const int8_t & spouse_level, const int8_t & breed, const int8_t & sex, const entity_look_ptr & spouse_entity_look, const basic_guild_informations_ptr & guild_info, const int8_t & alignment_side)
        {
            _data << spouse_account_id;
            _data << spouse_id;
            _data << spouse_name;
            _data << spouse_level;
            _data << breed;
            _data << sex;
            _data << spouse_entity_look->buffer();
            _data << guild_info->buffer();
            _data << alignment_side;
        }
        
        friend_spouse_informations(byte_buffer & data)
        {
            data >> spouse_account_id;
            data >> spouse_id;
            data >> spouse_name;
            data >> spouse_level;
            data >> breed;
            data >> sex;
            spouse_entity_look = std::make_unique<entity_look>(data);
            guild_info = std::make_unique<basic_guild_informations>(data);
            data >> alignment_side;
        }
    };
    
    using friend_spouse_informations_ptr = std::unique_ptr<friend_spouse_informations>;
}

#endif
