//  Generated by desperion protocol_builder

#ifndef core_paddock_content_informations_hpp
#define core_paddock_content_informations_hpp

namespace protocol
{
    struct paddock_content_informations : paddock_informations
    {
        int32_t paddock_id;
        int16_t world_x;
        int16_t world_y;
        int32_t map_id;
        int16_t sub_area_id;
        bool abandonned;
        std::vector<mount_informations_for_paddock_ptr> mounts_informations;
        
        int16_t id() const override
        { return 183; } 
        
        paddock_content_informations(const int16_t & max_outdoor_mount, const int16_t & max_items, const int32_t & paddock_id, const int16_t & world_x, const int16_t & world_y, const int32_t & map_id, const int16_t & sub_area_id, const bool & abandonned, const std::vector<mount_informations_for_paddock_ptr> & mounts_informations) : paddock_informations { max_outdoor_mount,max_items }
        {
            _data << paddock_id;
            _data << world_x;
            _data << world_y;
            _data << map_id;
            _data << sub_area_id;
            _data << abandonned;
            _data << static_cast<int16_t>(mounts_informations.size());
            for (auto && i : mounts_informations)
                _data << i->buffer();
        }
        
        paddock_content_informations(byte_buffer & data) : paddock_informations { data }
        {
            data >> paddock_id;
            data >> world_x;
            data >> world_y;
            data >> map_id;
            data >> sub_area_id;
            data >> abandonned;
            int16_t mounts_informations_size;
            data >> mounts_informations_size;
            mounts_informations.resize(mounts_informations_size);
            for (int16_t i = 0; i < mounts_informations_size; ++i)
                mounts_informations[i] = std::make_unique<mount_informations_for_paddock>(data);
        }
    };
    
    using paddock_content_informations_ptr = std::unique_ptr<paddock_content_informations>;
}

#endif
