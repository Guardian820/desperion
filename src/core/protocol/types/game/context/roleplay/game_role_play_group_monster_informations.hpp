//  Generated by desperion protocol_builder

#ifndef core_game_role_play_group_monster_informations_hpp
#define core_game_role_play_group_monster_informations_hpp

namespace protocol
{
    struct game_role_play_group_monster_informations : game_role_play_actor_informations
    {
        group_monster_static_informations_ptr static_infos;
        int16_t age_bonus;
        int8_t loot_share;
        int8_t alignment_side;
        bool key_ring_bonus;
        
        int16_t id() const override
        { return 160; } 
        
        game_role_play_group_monster_informations(const int32_t & contextual_id, const entity_look_ptr & look, const entity_disposition_informations_ptr & disposition, const group_monster_static_informations_ptr & static_infos, const int16_t & age_bonus, const int8_t & loot_share, const int8_t & alignment_side, const bool & key_ring_bonus) : game_role_play_actor_informations { contextual_id,look,disposition }
        {
            _data << static_infos->id() << static_infos->buffer();
            _data << age_bonus;
            _data << loot_share;
            _data << alignment_side;
            _data << key_ring_bonus;
        }
        
        game_role_play_group_monster_informations(byte_buffer & data) : game_role_play_actor_informations { data }
        {
            int16_t static_infos_id;
            data >> static_infos_id;
            static_infos.reset(type_manager::get_group_monster_static_informations(static_infos_id, data));
            data >> age_bonus;
            data >> loot_share;
            data >> alignment_side;
            data >> key_ring_bonus;
        }
    };
    
    using game_role_play_group_monster_informations_ptr = std::unique_ptr<game_role_play_group_monster_informations>;
}

#endif
