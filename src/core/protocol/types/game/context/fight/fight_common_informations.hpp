//  Generated by desperion protocol_builder

#ifndef core_fight_common_informations_hpp
#define core_fight_common_informations_hpp

namespace network
{
    struct fight_common_informations : dofus_unit
    {
        int32_t fight_id;
        int8_t fight_type;
        std::vector<fight_team_informations_ptr> fight_teams;
        std::vector<int16_t> fight_teams_positions;
        std::vector<fight_options_informations_ptr> fight_teams_options;
        
        int16_t id() const override
        { return 43; } 
        
        fight_common_informations(const int32_t & fight_id, const int8_t & fight_type, const std::vector<fight_team_informations_ptr> & fight_teams, const std::vector<int16_t> & fight_teams_positions, const std::vector<fight_options_informations_ptr> & fight_teams_options)
        {
            _data << fight_id;
            _data << fight_type;
            _data << static_cast<int16_t>(fight_teams.size());
            for (auto && i : fight_teams)
                _data << i->id() << i->buffer();
            _data << static_cast<int16_t>(fight_teams_positions.size());
            for (auto && i : fight_teams_positions)
                _data << i;
            _data << static_cast<int16_t>(fight_teams_options.size());
            for (auto && i : fight_teams_options)
                _data << i->buffer();
        }
        
        fight_common_informations(byte_buffer & data)
        {
            data >> fight_id;
            data >> fight_type;
            int16_t fight_teams_size;
            data >> fight_teams_size;
            fight_teams.resize(fight_teams_size);
            for (int16_t i = 0; i < fight_teams_size; ++i)
            {
                int16_t p;
                data >> p;
                fight_teams[i].reset(type_manager::get_fight_team_informations(p, data));
            }
            int16_t fight_teams_positions_size;
            data >> fight_teams_positions_size;
            fight_teams_positions.resize(fight_teams_positions_size);
            for (int16_t i = 0; i < fight_teams_positions_size; ++i)
                data >> fight_teams_positions[i];
            int16_t fight_teams_options_size;
            data >> fight_teams_options_size;
            fight_teams_options.resize(fight_teams_options_size);
            for (int16_t i = 0; i < fight_teams_options_size; ++i)
                fight_teams_options[i] = std::make_unique<fight_options_informations>(data);
        }
    };
    
    using fight_common_informations_ptr = std::unique_ptr<fight_common_informations>;
}

#endif
