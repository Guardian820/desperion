//  Generated by desperion protocol_builder

#ifndef core_fight_team_informations_hpp
#define core_fight_team_informations_hpp

namespace protocol
{
    struct fight_team_informations : abstract_fight_team_informations
    {
        std::vector<fight_team_member_informations_ptr> team_members;
        
        int16_t id() const override
        { return 33; } 
        
        fight_team_informations(const int8_t & team_id, const int32_t & leader_id, const int8_t & team_side, const int8_t & team_type_id, const std::vector<fight_team_member_informations_ptr> & team_members) : abstract_fight_team_informations { team_id,leader_id,team_side,team_type_id }
        {
            _data << static_cast<int16_t>(team_members.size());
            for (auto && i : team_members)
                _data << i->id() << i->buffer();
        }
        
        fight_team_informations(byte_buffer & data) : abstract_fight_team_informations { data }
        {
            int16_t team_members_size;
            data >> team_members_size;
            team_members.resize(team_members_size);
            for (int16_t i = 0; i < team_members_size; ++i)
            {
                int16_t p;
                data >> p;
                team_members[i].reset(type_manager::get_fight_team_member_informations(p, data));
            }
        }
    };
    
    using fight_team_informations_ptr = std::unique_ptr<fight_team_informations>;
}

#endif
