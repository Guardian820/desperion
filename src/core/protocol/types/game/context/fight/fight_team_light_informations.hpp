//  Generated by desperion protocol_builder

#ifndef core_fight_team_light_informations_hpp
#define core_fight_team_light_informations_hpp

namespace network
{
    struct fight_team_light_informations : abstract_fight_team_informations
    {
        bool has_friend;
        bool has_guild_member;
        bool has_group_member;
        bool has_my_tax_collector;
        int8_t team_members_count;
        int32_t mean_level;
        
        int16_t id() const override
        { return 115; } 
        
        fight_team_light_informations(const int8_t & team_id, const int32_t & leader_id, const int8_t & team_side, const int8_t & team_type_id, const bool & has_friend, const bool & has_guild_member, const bool & has_group_member, const bool & has_my_tax_collector, const int8_t & team_members_count, const int32_t & mean_level) : abstract_fight_team_informations { team_id,leader_id,team_side,team_type_id }
        {
            int8_t flag = 0;
            set_bool_flag(flag, 0, has_friend);
            set_bool_flag(flag, 1, has_guild_member);
            set_bool_flag(flag, 2, has_group_member);
            set_bool_flag(flag, 3, has_my_tax_collector);
            _data << flag;
            _data << team_members_count;
            _data << mean_level;
        }
        
        fight_team_light_informations(byte_buffer & data) : abstract_fight_team_informations { data }
        {
            int8_t flag;
            data >> flag;
            has_friend = get_bool_flag(flag, 0);
            has_guild_member = get_bool_flag(flag, 1);
            has_group_member = get_bool_flag(flag, 2);
            has_my_tax_collector = get_bool_flag(flag, 3);
            data >> team_members_count;
            data >> mean_level;
        }
    };
    
    using fight_team_light_informations_ptr = std::unique_ptr<fight_team_light_informations>;
}

#endif
