//  Generated by desperion protocol_builder

#ifndef core_seller_buyer_descriptor_hpp
#define core_seller_buyer_descriptor_hpp

namespace network
{
    struct seller_buyer_descriptor : dofus_unit
    {
        std::vector<int32_t> quantities;
        std::vector<int32_t> types;
        float_ptr tax_percentage;
        int32_t max_item_level;
        int32_t max_item_per_account;
        int32_t npc_contextual_id;
        int16_t unsold_delay;
        
        int16_t id() const override
        { return 121; } 
        
        seller_buyer_descriptor(const std::vector<int32_t> & quantities, const std::vector<int32_t> & types, const float_ptr & tax_percentage, const int32_t & max_item_level, const int32_t & max_item_per_account, const int32_t & npc_contextual_id, const int16_t & unsold_delay)
        {
            _data << static_cast<int16_t>(quantities.size());
            for (auto && i : quantities)
                _data << i;
            _data << static_cast<int16_t>(types.size());
            for (auto && i : types)
                _data << i;
            _data << tax_percentage->buffer();
            _data << max_item_level;
            _data << max_item_per_account;
            _data << npc_contextual_id;
            _data << unsold_delay;
        }
        
        seller_buyer_descriptor(byte_buffer & data)
        {
            int16_t quantities_size;
            data >> quantities_size;
            quantities.resize(quantities_size);
            for (int16_t i = 0; i < quantities_size; ++i)
                data >> quantities[i];
            int16_t types_size;
            data >> types_size;
            types.resize(types_size);
            for (int16_t i = 0; i < types_size; ++i)
                data >> types[i];
            tax_percentage = std::make_unique<float>(data);
            data >> max_item_level;
            data >> max_item_per_account;
            data >> npc_contextual_id;
            data >> unsold_delay;
        }
    };
    
    using seller_buyer_descriptor_ptr = std::unique_ptr<seller_buyer_descriptor>;
}

#endif
