//  Generated by desperion protocol_builder

#ifndef core_character_characteristics_informations_hpp
#define core_character_characteristics_informations_hpp

namespace protocol
{
    struct character_characteristics_informations : dofus_unit
    {
        double experience;
        double experience_level_floor;
        double experience_next_level_floor;
        int32_t kamas;
        int32_t stats_points;
        int32_t spells_points;
        actor_extended_alignment_informations_ptr alignment_infos;
        int32_t life_points;
        int32_t max_life_points;
        int16_t energy_points;
        int16_t max_energy_points;
        int16_t action_points_current;
        int16_t movement_points_current;
        character_base_characteristic_ptr initiative;
        character_base_characteristic_ptr prospecting;
        character_base_characteristic_ptr action_points;
        character_base_characteristic_ptr movement_points;
        character_base_characteristic_ptr strength;
        character_base_characteristic_ptr vitality;
        character_base_characteristic_ptr wisdom;
        character_base_characteristic_ptr chance;
        character_base_characteristic_ptr agility;
        character_base_characteristic_ptr intelligence;
        character_base_characteristic_ptr range;
        character_base_characteristic_ptr summonable_creatures_boost;
        character_base_characteristic_ptr reflect;
        character_base_characteristic_ptr critical_hit;
        int16_t critical_hit_weapon;
        character_base_characteristic_ptr critical_miss;
        character_base_characteristic_ptr heal_bonus;
        character_base_characteristic_ptr all_damages_bonus;
        character_base_characteristic_ptr weapon_damages_bonus_percent;
        character_base_characteristic_ptr damages_bonus_percent;
        character_base_characteristic_ptr trap_bonus;
        character_base_characteristic_ptr trap_bonus_percent;
        character_base_characteristic_ptr permanent_damage_percent;
        character_base_characteristic_ptr tackle_block;
        character_base_characteristic_ptr tackle_evade;
        character_base_characteristic_ptr p_a_attack;
        character_base_characteristic_ptr p_m_attack;
        character_base_characteristic_ptr push_damage_bonus;
        character_base_characteristic_ptr critical_damage_bonus;
        character_base_characteristic_ptr neutral_damage_bonus;
        character_base_characteristic_ptr earth_damage_bonus;
        character_base_characteristic_ptr water_damage_bonus;
        character_base_characteristic_ptr air_damage_bonus;
        character_base_characteristic_ptr fire_damage_bonus;
        character_base_characteristic_ptr dodge_p_a_lost_probability;
        character_base_characteristic_ptr dodge_p_m_lost_probability;
        character_base_characteristic_ptr neutral_element_resist_percent;
        character_base_characteristic_ptr earth_element_resist_percent;
        character_base_characteristic_ptr water_element_resist_percent;
        character_base_characteristic_ptr air_element_resist_percent;
        character_base_characteristic_ptr fire_element_resist_percent;
        character_base_characteristic_ptr neutral_element_reduction;
        character_base_characteristic_ptr earth_element_reduction;
        character_base_characteristic_ptr water_element_reduction;
        character_base_characteristic_ptr air_element_reduction;
        character_base_characteristic_ptr fire_element_reduction;
        character_base_characteristic_ptr push_damage_reduction;
        character_base_characteristic_ptr critical_damage_reduction;
        character_base_characteristic_ptr pvp_neutral_element_resist_percent;
        character_base_characteristic_ptr pvp_earth_element_resist_percent;
        character_base_characteristic_ptr pvp_water_element_resist_percent;
        character_base_characteristic_ptr pvp_air_element_resist_percent;
        character_base_characteristic_ptr pvp_fire_element_resist_percent;
        character_base_characteristic_ptr pvp_neutral_element_reduction;
        character_base_characteristic_ptr pvp_earth_element_reduction;
        character_base_characteristic_ptr pvp_water_element_reduction;
        character_base_characteristic_ptr pvp_air_element_reduction;
        character_base_characteristic_ptr pvp_fire_element_reduction;
        std::vector<character_spell_modification_ptr> spell_modifications;
        
        int16_t id() const override
        { return 8; } 
        
        character_characteristics_informations(const double & experience, const double & experience_level_floor, const double & experience_next_level_floor, const int32_t & kamas, const int32_t & stats_points, const int32_t & spells_points, const actor_extended_alignment_informations_ptr & alignment_infos, const int32_t & life_points, const int32_t & max_life_points, const int16_t & energy_points, const int16_t & max_energy_points, const int16_t & action_points_current, const int16_t & movement_points_current, const character_base_characteristic_ptr & initiative, const character_base_characteristic_ptr & prospecting, const character_base_characteristic_ptr & action_points, const character_base_characteristic_ptr & movement_points, const character_base_characteristic_ptr & strength, const character_base_characteristic_ptr & vitality, const character_base_characteristic_ptr & wisdom, const character_base_characteristic_ptr & chance, const character_base_characteristic_ptr & agility, const character_base_characteristic_ptr & intelligence, const character_base_characteristic_ptr & range, const character_base_characteristic_ptr & summonable_creatures_boost, const character_base_characteristic_ptr & reflect, const character_base_characteristic_ptr & critical_hit, const int16_t & critical_hit_weapon, const character_base_characteristic_ptr & critical_miss, const character_base_characteristic_ptr & heal_bonus, const character_base_characteristic_ptr & all_damages_bonus, const character_base_characteristic_ptr & weapon_damages_bonus_percent, const character_base_characteristic_ptr & damages_bonus_percent, const character_base_characteristic_ptr & trap_bonus, const character_base_characteristic_ptr & trap_bonus_percent, const character_base_characteristic_ptr & permanent_damage_percent, const character_base_characteristic_ptr & tackle_block, const character_base_characteristic_ptr & tackle_evade, const character_base_characteristic_ptr & p_a_attack, const character_base_characteristic_ptr & p_m_attack, const character_base_characteristic_ptr & push_damage_bonus, const character_base_characteristic_ptr & critical_damage_bonus, const character_base_characteristic_ptr & neutral_damage_bonus, const character_base_characteristic_ptr & earth_damage_bonus, const character_base_characteristic_ptr & water_damage_bonus, const character_base_characteristic_ptr & air_damage_bonus, const character_base_characteristic_ptr & fire_damage_bonus, const character_base_characteristic_ptr & dodge_p_a_lost_probability, const character_base_characteristic_ptr & dodge_p_m_lost_probability, const character_base_characteristic_ptr & neutral_element_resist_percent, const character_base_characteristic_ptr & earth_element_resist_percent, const character_base_characteristic_ptr & water_element_resist_percent, const character_base_characteristic_ptr & air_element_resist_percent, const character_base_characteristic_ptr & fire_element_resist_percent, const character_base_characteristic_ptr & neutral_element_reduction, const character_base_characteristic_ptr & earth_element_reduction, const character_base_characteristic_ptr & water_element_reduction, const character_base_characteristic_ptr & air_element_reduction, const character_base_characteristic_ptr & fire_element_reduction, const character_base_characteristic_ptr & push_damage_reduction, const character_base_characteristic_ptr & critical_damage_reduction, const character_base_characteristic_ptr & pvp_neutral_element_resist_percent, const character_base_characteristic_ptr & pvp_earth_element_resist_percent, const character_base_characteristic_ptr & pvp_water_element_resist_percent, const character_base_characteristic_ptr & pvp_air_element_resist_percent, const character_base_characteristic_ptr & pvp_fire_element_resist_percent, const character_base_characteristic_ptr & pvp_neutral_element_reduction, const character_base_characteristic_ptr & pvp_earth_element_reduction, const character_base_characteristic_ptr & pvp_water_element_reduction, const character_base_characteristic_ptr & pvp_air_element_reduction, const character_base_characteristic_ptr & pvp_fire_element_reduction, const std::vector<character_spell_modification_ptr> & spell_modifications)
        {
            _data << experience;
            _data << experience_level_floor;
            _data << experience_next_level_floor;
            _data << kamas;
            _data << stats_points;
            _data << spells_points;
            _data << alignment_infos->buffer();
            _data << life_points;
            _data << max_life_points;
            _data << energy_points;
            _data << max_energy_points;
            _data << action_points_current;
            _data << movement_points_current;
            _data << initiative->buffer();
            _data << prospecting->buffer();
            _data << action_points->buffer();
            _data << movement_points->buffer();
            _data << strength->buffer();
            _data << vitality->buffer();
            _data << wisdom->buffer();
            _data << chance->buffer();
            _data << agility->buffer();
            _data << intelligence->buffer();
            _data << range->buffer();
            _data << summonable_creatures_boost->buffer();
            _data << reflect->buffer();
            _data << critical_hit->buffer();
            _data << critical_hit_weapon;
            _data << critical_miss->buffer();
            _data << heal_bonus->buffer();
            _data << all_damages_bonus->buffer();
            _data << weapon_damages_bonus_percent->buffer();
            _data << damages_bonus_percent->buffer();
            _data << trap_bonus->buffer();
            _data << trap_bonus_percent->buffer();
            _data << permanent_damage_percent->buffer();
            _data << tackle_block->buffer();
            _data << tackle_evade->buffer();
            _data << p_a_attack->buffer();
            _data << p_m_attack->buffer();
            _data << push_damage_bonus->buffer();
            _data << critical_damage_bonus->buffer();
            _data << neutral_damage_bonus->buffer();
            _data << earth_damage_bonus->buffer();
            _data << water_damage_bonus->buffer();
            _data << air_damage_bonus->buffer();
            _data << fire_damage_bonus->buffer();
            _data << dodge_p_a_lost_probability->buffer();
            _data << dodge_p_m_lost_probability->buffer();
            _data << neutral_element_resist_percent->buffer();
            _data << earth_element_resist_percent->buffer();
            _data << water_element_resist_percent->buffer();
            _data << air_element_resist_percent->buffer();
            _data << fire_element_resist_percent->buffer();
            _data << neutral_element_reduction->buffer();
            _data << earth_element_reduction->buffer();
            _data << water_element_reduction->buffer();
            _data << air_element_reduction->buffer();
            _data << fire_element_reduction->buffer();
            _data << push_damage_reduction->buffer();
            _data << critical_damage_reduction->buffer();
            _data << pvp_neutral_element_resist_percent->buffer();
            _data << pvp_earth_element_resist_percent->buffer();
            _data << pvp_water_element_resist_percent->buffer();
            _data << pvp_air_element_resist_percent->buffer();
            _data << pvp_fire_element_resist_percent->buffer();
            _data << pvp_neutral_element_reduction->buffer();
            _data << pvp_earth_element_reduction->buffer();
            _data << pvp_water_element_reduction->buffer();
            _data << pvp_air_element_reduction->buffer();
            _data << pvp_fire_element_reduction->buffer();
            _data << static_cast<int16_t>(spell_modifications.size());
            for (auto && i : spell_modifications)
                _data << i->buffer();
        }
        
        character_characteristics_informations(byte_buffer & data)
        {
            data >> experience;
            data >> experience_level_floor;
            data >> experience_next_level_floor;
            data >> kamas;
            data >> stats_points;
            data >> spells_points;
            alignment_infos = std::make_unique<actor_extended_alignment_informations>(data);
            data >> life_points;
            data >> max_life_points;
            data >> energy_points;
            data >> max_energy_points;
            data >> action_points_current;
            data >> movement_points_current;
            initiative = std::make_unique<character_base_characteristic>(data);
            prospecting = std::make_unique<character_base_characteristic>(data);
            action_points = std::make_unique<character_base_characteristic>(data);
            movement_points = std::make_unique<character_base_characteristic>(data);
            strength = std::make_unique<character_base_characteristic>(data);
            vitality = std::make_unique<character_base_characteristic>(data);
            wisdom = std::make_unique<character_base_characteristic>(data);
            chance = std::make_unique<character_base_characteristic>(data);
            agility = std::make_unique<character_base_characteristic>(data);
            intelligence = std::make_unique<character_base_characteristic>(data);
            range = std::make_unique<character_base_characteristic>(data);
            summonable_creatures_boost = std::make_unique<character_base_characteristic>(data);
            reflect = std::make_unique<character_base_characteristic>(data);
            critical_hit = std::make_unique<character_base_characteristic>(data);
            data >> critical_hit_weapon;
            critical_miss = std::make_unique<character_base_characteristic>(data);
            heal_bonus = std::make_unique<character_base_characteristic>(data);
            all_damages_bonus = std::make_unique<character_base_characteristic>(data);
            weapon_damages_bonus_percent = std::make_unique<character_base_characteristic>(data);
            damages_bonus_percent = std::make_unique<character_base_characteristic>(data);
            trap_bonus = std::make_unique<character_base_characteristic>(data);
            trap_bonus_percent = std::make_unique<character_base_characteristic>(data);
            permanent_damage_percent = std::make_unique<character_base_characteristic>(data);
            tackle_block = std::make_unique<character_base_characteristic>(data);
            tackle_evade = std::make_unique<character_base_characteristic>(data);
            p_a_attack = std::make_unique<character_base_characteristic>(data);
            p_m_attack = std::make_unique<character_base_characteristic>(data);
            push_damage_bonus = std::make_unique<character_base_characteristic>(data);
            critical_damage_bonus = std::make_unique<character_base_characteristic>(data);
            neutral_damage_bonus = std::make_unique<character_base_characteristic>(data);
            earth_damage_bonus = std::make_unique<character_base_characteristic>(data);
            water_damage_bonus = std::make_unique<character_base_characteristic>(data);
            air_damage_bonus = std::make_unique<character_base_characteristic>(data);
            fire_damage_bonus = std::make_unique<character_base_characteristic>(data);
            dodge_p_a_lost_probability = std::make_unique<character_base_characteristic>(data);
            dodge_p_m_lost_probability = std::make_unique<character_base_characteristic>(data);
            neutral_element_resist_percent = std::make_unique<character_base_characteristic>(data);
            earth_element_resist_percent = std::make_unique<character_base_characteristic>(data);
            water_element_resist_percent = std::make_unique<character_base_characteristic>(data);
            air_element_resist_percent = std::make_unique<character_base_characteristic>(data);
            fire_element_resist_percent = std::make_unique<character_base_characteristic>(data);
            neutral_element_reduction = std::make_unique<character_base_characteristic>(data);
            earth_element_reduction = std::make_unique<character_base_characteristic>(data);
            water_element_reduction = std::make_unique<character_base_characteristic>(data);
            air_element_reduction = std::make_unique<character_base_characteristic>(data);
            fire_element_reduction = std::make_unique<character_base_characteristic>(data);
            push_damage_reduction = std::make_unique<character_base_characteristic>(data);
            critical_damage_reduction = std::make_unique<character_base_characteristic>(data);
            pvp_neutral_element_resist_percent = std::make_unique<character_base_characteristic>(data);
            pvp_earth_element_resist_percent = std::make_unique<character_base_characteristic>(data);
            pvp_water_element_resist_percent = std::make_unique<character_base_characteristic>(data);
            pvp_air_element_resist_percent = std::make_unique<character_base_characteristic>(data);
            pvp_fire_element_resist_percent = std::make_unique<character_base_characteristic>(data);
            pvp_neutral_element_reduction = std::make_unique<character_base_characteristic>(data);
            pvp_earth_element_reduction = std::make_unique<character_base_characteristic>(data);
            pvp_water_element_reduction = std::make_unique<character_base_characteristic>(data);
            pvp_air_element_reduction = std::make_unique<character_base_characteristic>(data);
            pvp_fire_element_reduction = std::make_unique<character_base_characteristic>(data);
            int16_t spell_modifications_size;
            data >> spell_modifications_size;
            spell_modifications.resize(spell_modifications_size);
            for (int16_t i = 0; i < spell_modifications_size; ++i)
                spell_modifications[i] = std::make_unique<character_spell_modification>(data);
        }
    };
    
    using character_characteristics_informations_ptr = std::unique_ptr<character_characteristics_informations>;
}

#endif
