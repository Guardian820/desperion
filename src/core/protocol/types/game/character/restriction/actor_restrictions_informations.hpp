//  Generated by desperion protocol_builder

#ifndef core_actor_restrictions_informations_hpp
#define core_actor_restrictions_informations_hpp

namespace network
{
    struct actor_restrictions_informations : dofus_unit
    {
        bool cant_be_aggressed;
        bool cant_be_challenged;
        bool cant_trade;
        bool cant_be_attacked_by_mutant;
        bool cant_run;
        bool force_slow_walk;
        bool cant_minimize;
        bool cant_move;
        bool cant_aggress;
        bool cant_challenge;
        bool cant_exchange;
        bool cant_attack;
        bool cant_chat;
        bool cant_be_merchant;
        bool cant_use_object;
        bool cant_use_tax_collector;
        bool cant_use_interactive;
        bool cant_speak_to_n_p_c;
        bool cant_change_zone;
        bool cant_attack_monster;
        bool cant_walk_8_directions;
        
        int16_t id() const override
        { return 204; } 
        
        actor_restrictions_informations(const bool & cant_be_aggressed, const bool & cant_be_challenged, const bool & cant_trade, const bool & cant_be_attacked_by_mutant, const bool & cant_run, const bool & force_slow_walk, const bool & cant_minimize, const bool & cant_move, const bool & cant_aggress, const bool & cant_challenge, const bool & cant_exchange, const bool & cant_attack, const bool & cant_chat, const bool & cant_be_merchant, const bool & cant_use_object, const bool & cant_use_tax_collector, const bool & cant_use_interactive, const bool & cant_speak_to_n_p_c, const bool & cant_change_zone, const bool & cant_attack_monster, const bool & cant_walk_8_directions)
        {
            int8_t flag = 0;
            set_bool_flag(flag, 0, cant_be_aggressed);
            set_bool_flag(flag, 1, cant_be_challenged);
            set_bool_flag(flag, 2, cant_trade);
            set_bool_flag(flag, 3, cant_be_attacked_by_mutant);
            set_bool_flag(flag, 4, cant_run);
            set_bool_flag(flag, 5, force_slow_walk);
            set_bool_flag(flag, 6, cant_minimize);
            set_bool_flag(flag, 7, cant_move);
            _data << flag;
            flag = 0;
            set_bool_flag(flag, 0, cant_aggress);
            set_bool_flag(flag, 1, cant_challenge);
            set_bool_flag(flag, 2, cant_exchange);
            set_bool_flag(flag, 3, cant_attack);
            set_bool_flag(flag, 4, cant_chat);
            set_bool_flag(flag, 5, cant_be_merchant);
            set_bool_flag(flag, 6, cant_use_object);
            set_bool_flag(flag, 7, cant_use_tax_collector);
            _data << flag;
            flag = 0;
            set_bool_flag(flag, 0, cant_use_interactive);
            set_bool_flag(flag, 1, cant_speak_to_n_p_c);
            set_bool_flag(flag, 2, cant_change_zone);
            set_bool_flag(flag, 3, cant_attack_monster);
            set_bool_flag(flag, 4, cant_walk_8_directions);
            _data << flag;
        }
        
        actor_restrictions_informations(byte_buffer & data)
        {
            int8_t flag;
            data >> flag;
            cant_be_aggressed = get_bool_flag(flag, 0);
            cant_be_challenged = get_bool_flag(flag, 1);
            cant_trade = get_bool_flag(flag, 2);
            cant_be_attacked_by_mutant = get_bool_flag(flag, 3);
            cant_run = get_bool_flag(flag, 4);
            force_slow_walk = get_bool_flag(flag, 5);
            cant_minimize = get_bool_flag(flag, 6);
            cant_move = get_bool_flag(flag, 7);
            data >> flag;
            cant_aggress = get_bool_flag(flag, 0);
            cant_challenge = get_bool_flag(flag, 1);
            cant_exchange = get_bool_flag(flag, 2);
            cant_attack = get_bool_flag(flag, 3);
            cant_chat = get_bool_flag(flag, 4);
            cant_be_merchant = get_bool_flag(flag, 5);
            cant_use_object = get_bool_flag(flag, 6);
            cant_use_tax_collector = get_bool_flag(flag, 7);
            data >> flag;
            cant_use_interactive = get_bool_flag(flag, 0);
            cant_speak_to_n_p_c = get_bool_flag(flag, 1);
            cant_change_zone = get_bool_flag(flag, 2);
            cant_attack_monster = get_bool_flag(flag, 3);
            cant_walk_8_directions = get_bool_flag(flag, 4);
        }
    };
    
    using actor_restrictions_informations_ptr = std::unique_ptr<actor_restrictions_informations>;
}

#endif
