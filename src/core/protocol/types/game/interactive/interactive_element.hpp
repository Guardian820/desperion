//  Generated by desperion protocol_builder

#ifndef core_interactive_element_hpp
#define core_interactive_element_hpp

namespace network
{
    struct interactive_element : dofus_unit
    {
        int32_t element_id;
        int32_t element_type_id;
        std::vector<interactive_element_skill_ptr> enabled_skills;
        std::vector<interactive_element_skill_ptr> disabled_skills;
        
        int16_t id() const override
        { return 80; } 
        
        interactive_element(const int32_t & element_id, const int32_t & element_type_id, const std::vector<interactive_element_skill_ptr> & enabled_skills, const std::vector<interactive_element_skill_ptr> & disabled_skills)
        {
            _data << element_id;
            _data << element_type_id;
            _data << static_cast<int16_t>(enabled_skills.size());
            for (auto && i : enabled_skills)
                _data << i->id() << i->buffer();
            _data << static_cast<int16_t>(disabled_skills.size());
            for (auto && i : disabled_skills)
                _data << i->id() << i->buffer();
        }
        
        interactive_element(byte_buffer & data)
        {
            data >> element_id;
            data >> element_type_id;
            int16_t enabled_skills_size;
            data >> enabled_skills_size;
            enabled_skills.resize(enabled_skills_size);
            for (int16_t i = 0; i < enabled_skills_size; ++i)
            {
                int16_t p;
                data >> p;
                enabled_skills[i].reset(type_manager::get_interactive_element_skill(p, data));
            }
            int16_t disabled_skills_size;
            data >> disabled_skills_size;
            disabled_skills.resize(disabled_skills_size);
            for (int16_t i = 0; i < disabled_skills_size; ++i)
            {
                int16_t p;
                data >> p;
                disabled_skills[i].reset(type_manager::get_interactive_element_skill(p, data));
            }
        }
    };
    
    using interactive_element_ptr = std::unique_ptr<interactive_element>;
}

#endif
