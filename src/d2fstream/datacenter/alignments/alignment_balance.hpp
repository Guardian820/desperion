//  Generated by desperion protocol_builder

#ifndef d2fstream_alignment_balance_hpp
#define d2fstream_alignment_balance_hpp

namespace datacenter
{
    struct alignment_balance : data_holder
    {
        int32_t id;
        int32_t start_value;
        int32_t end_value;
        int32_t name_id;
        int32_t description_id;
        
        alignment_balance() = default;
        
        alignment_balance(const int32_t & id, const int32_t & start_value, const int32_t & end_value, const int32_t & name_id, const int32_t & description_id) : id { id }, start_value { start_value }, end_value { end_value }, name_id { name_id }, description_id { description_id }
        {
        }
        
        alignment_balance(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(start_value, data.second.at("startValue"));
            acquire(end_value, data.second.at("endValue"));
            acquire(name_id, data.second.at("nameId"));
            acquire(description_id, data.second.at("descriptionId"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<alignment_balance>();
        release(id, data.second["id"], file);
        release(start_value, data.second["startValue"], file);
        release(end_value, data.second["endValue"], file);
        release(name_id, data.second["nameId"], file);
        release(description_id, data.second["descriptionId"], file);
        return data;
    }
#endif
}
#endif