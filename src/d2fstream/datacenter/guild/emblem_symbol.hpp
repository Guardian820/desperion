//  Generated by desperion protocol_builder

#ifndef d2fstream_emblem_symbol_hpp
#define d2fstream_emblem_symbol_hpp

namespace datacenter
{
    struct emblem_symbol : data_holder
    {
        int32_t id;
        int32_t icon_id;
        int32_t skin_id;
        int32_t order;
        int32_t category_id;
        bool colorizable;
        
        emblem_symbol() = default;
        
        emblem_symbol(const int32_t & id, const int32_t & icon_id, const int32_t & skin_id, const int32_t & order, const int32_t & category_id, const bool & colorizable) : id { id }, icon_id { icon_id }, skin_id { skin_id }, order { order }, category_id { category_id }, colorizable { colorizable }
        {
        }
        
        emblem_symbol(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(icon_id, data.second.at("iconId"));
            acquire(skin_id, data.second.at("skinId"));
            acquire(order, data.second.at("order"));
            acquire(category_id, data.second.at("categoryId"));
            acquire(colorizable, data.second.at("colorizable"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<emblem_symbol>();
        release(id, data.second["id"], file);
        release(icon_id, data.second["iconId"], file);
        release(skin_id, data.second["skinId"], file);
        release(order, data.second["order"], file);
        release(category_id, data.second["categoryId"], file);
        release(colorizable, data.second["colorizable"], file);
        return data;
    }
#endif
}
#endif