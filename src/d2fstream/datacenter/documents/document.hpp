//  Generated by desperion protocol_builder

#ifndef d2fstream_document_hpp
#define d2fstream_document_hpp

namespace datacenter
{
    struct document : data_holder
    {
        int32_t id;
        int32_t type_id;
        int32_t title_id;
        int32_t author_id;
        int32_t sub_title_id;
        int32_t content_id;
        std::string content_c_s_s;
        
        document() = default;
        
        document(const int32_t & id, const int32_t & type_id, const int32_t & title_id, const int32_t & author_id, const int32_t & sub_title_id, const int32_t & content_id, const std::string & content_c_s_s) : id { id }, type_id { type_id }, title_id { title_id }, author_id { author_id }, sub_title_id { sub_title_id }, content_id { content_id }, content_c_s_s { content_c_s_s }
        {
        }
        
        document(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(type_id, data.second.at("typeId"));
            acquire(title_id, data.second.at("titleId"));
            acquire(author_id, data.second.at("authorId"));
            acquire(sub_title_id, data.second.at("subTitleId"));
            acquire(content_id, data.second.at("contentId"));
            acquire(content_c_s_s, data.second.at("contentCSS"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<document>();
        release(id, data.second["id"], file);
        release(type_id, data.second["typeId"], file);
        release(title_id, data.second["titleId"], file);
        release(author_id, data.second["authorId"], file);
        release(sub_title_id, data.second["subTitleId"], file);
        release(content_id, data.second["contentId"], file);
        release(content_c_s_s, data.second["contentCSS"], file);
        return data;
    }
#endif
}
#endif