//  Generated by desperion protocol_builder

#ifndef d2fstream_spell_bomb_hpp
#define d2fstream_spell_bomb_hpp

namespace datacenter
{
    struct spell_bomb : data_holder
    {
        int32_t id;
        int32_t chain_reaction_spell_id;
        int32_t explod_spell_id;
        int32_t wall_id;
        int32_t instant_spell_id;
        int32_t combo_coeff;
        
        spell_bomb() = default;
        
        spell_bomb(const int32_t & id, const int32_t & chain_reaction_spell_id, const int32_t & explod_spell_id, const int32_t & wall_id, const int32_t & instant_spell_id, const int32_t & combo_coeff) : id { id }, chain_reaction_spell_id { chain_reaction_spell_id }, explod_spell_id { explod_spell_id }, wall_id { wall_id }, instant_spell_id { instant_spell_id }, combo_coeff { combo_coeff }
        {
        }
        
        spell_bomb(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(chain_reaction_spell_id, data.second.at("chainReactionSpellId"));
            acquire(explod_spell_id, data.second.at("explodSpellId"));
            acquire(wall_id, data.second.at("wallId"));
            acquire(instant_spell_id, data.second.at("instantSpellId"));
            acquire(combo_coeff, data.second.at("comboCoeff"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<spell_bomb>();
        release(id, data.second["id"], file);
        release(chain_reaction_spell_id, data.second["chainReactionSpellId"], file);
        release(explod_spell_id, data.second["explodSpellId"], file);
        release(wall_id, data.second["wallId"], file);
        release(instant_spell_id, data.second["instantSpellId"], file);
        release(combo_coeff, data.second["comboCoeff"], file);
        return data;
    }
#endif
}
#endif