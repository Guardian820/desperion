//  Generated by desperion protocol_builder

#ifndef d2fstream_spell_hpp
#define d2fstream_spell_hpp

namespace datacenter
{
    struct spell : data_holder
    {
        int32_t id;
        int32_t name_id;
        int32_t description_id;
        int32_t type_id;
        std::string script_params;
        std::string script_params_critical;
        int32_t script_id;
        int32_t script_id_critical;
        int32_t icon_id;
        std::vector<uint32_t> spell_levels;
        
        spell() = default;
        
        spell(const int32_t & id, const int32_t & name_id, const int32_t & description_id, const int32_t & type_id, const std::string & script_params, const std::string & script_params_critical, const int32_t & script_id, const int32_t & script_id_critical, const int32_t & icon_id, const std::vector<uint32_t> & spell_levels) : id { id }, name_id { name_id }, description_id { description_id }, type_id { type_id }, script_params { script_params }, script_params_critical { script_params_critical }, script_id { script_id }, script_id_critical { script_id_critical }, icon_id { icon_id }, spell_levels { spell_levels }
        {
        }
        
        spell(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(name_id, data.second.at("nameId"));
            acquire(description_id, data.second.at("descriptionId"));
            acquire(type_id, data.second.at("typeId"));
            acquire(script_params, data.second.at("scriptParams"));
            acquire(script_params_critical, data.second.at("scriptParamsCritical"));
            acquire(script_id, data.second.at("scriptId"));
            acquire(script_id_critical, data.second.at("scriptIdCritical"));
            acquire(icon_id, data.second.at("iconId"));
            acquire(spell_levels, data.second.at("spellLevels"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<spell>();
        release(id, data.second["id"], file);
        release(name_id, data.second["nameId"], file);
        release(description_id, data.second["descriptionId"], file);
        release(type_id, data.second["typeId"], file);
        release(script_params, data.second["scriptParams"], file);
        release(script_params_critical, data.second["scriptParamsCritical"], file);
        release(script_id, data.second["scriptId"], file);
        release(script_id_critical, data.second["scriptIdCritical"], file);
        release(icon_id, data.second["iconId"], file);
        release(spell_levels, data.second["spellLevels"], file);
        return data;
    }
#endif
}
#endif