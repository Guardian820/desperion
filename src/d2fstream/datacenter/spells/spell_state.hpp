//  Generated by desperion protocol_builder

#ifndef d2fstream_spell_state_hpp
#define d2fstream_spell_state_hpp

namespace datacenter
{
    struct spell_state : data_holder
    {
        int32_t id;
        int32_t name_id;
        bool prevents_spell_cast;
        bool prevents_fight;
        bool critical;
        
        spell_state() = default;
        
        spell_state(const int32_t & id, const int32_t & name_id, const bool & prevents_spell_cast, const bool & prevents_fight, const bool & critical) : id { id }, name_id { name_id }, prevents_spell_cast { prevents_spell_cast }, prevents_fight { prevents_fight }, critical { critical }
        {
        }
        
        spell_state(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(name_id, data.second.at("nameId"));
            acquire(prevents_spell_cast, data.second.at("preventsSpellCast"));
            acquire(prevents_fight, data.second.at("preventsFight"));
            acquire(critical, data.second.at("critical"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<spell_state>();
        release(id, data.second["id"], file);
        release(name_id, data.second["nameId"], file);
        release(prevents_spell_cast, data.second["preventsSpellCast"], file);
        release(prevents_fight, data.second["preventsFight"], file);
        release(critical, data.second["critical"], file);
        return data;
    }
#endif
}
#endif