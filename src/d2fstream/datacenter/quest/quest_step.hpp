//  Generated by desperion protocol_builder

#ifndef d2fstream_quest_step_hpp
#define d2fstream_quest_step_hpp

namespace datacenter
{
    struct quest_step : data_holder
    {
        int32_t id;
        int32_t quest_id;
        int32_t name_id;
        int32_t description_id;
        int32_t dialog_id;
        int32_t optimal_level;
        double duration;
        bool kamas_scale_with_player_level;
        double kamas_ratio;
        double xp_ratio;
        std::vector<uint32_t> objective_ids;
        std::vector<uint32_t> rewards_ids;
        
        quest_step() = default;
        
        quest_step(const int32_t & id, const int32_t & quest_id, const int32_t & name_id, const int32_t & description_id, const int32_t & dialog_id, const int32_t & optimal_level, const double & duration, const bool & kamas_scale_with_player_level, const double & kamas_ratio, const double & xp_ratio, const std::vector<uint32_t> & objective_ids, const std::vector<uint32_t> & rewards_ids) : id { id }, quest_id { quest_id }, name_id { name_id }, description_id { description_id }, dialog_id { dialog_id }, optimal_level { optimal_level }, duration { duration }, kamas_scale_with_player_level { kamas_scale_with_player_level }, kamas_ratio { kamas_ratio }, xp_ratio { xp_ratio }, objective_ids { objective_ids }, rewards_ids { rewards_ids }
        {
        }
        
        quest_step(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(quest_id, data.second.at("questId"));
            acquire(name_id, data.second.at("nameId"));
            acquire(description_id, data.second.at("descriptionId"));
            acquire(dialog_id, data.second.at("dialogId"));
            acquire(optimal_level, data.second.at("optimalLevel"));
            acquire(duration, data.second.at("duration"));
            acquire(kamas_scale_with_player_level, data.second.at("kamasScaleWithPlayerLevel"));
            acquire(kamas_ratio, data.second.at("kamasRatio"));
            acquire(xp_ratio, data.second.at("xpRatio"));
            acquire(objective_ids, data.second.at("objectiveIds"));
            acquire(rewards_ids, data.second.at("rewardsIds"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<quest_step>();
        release(id, data.second["id"], file);
        release(quest_id, data.second["questId"], file);
        release(name_id, data.second["nameId"], file);
        release(description_id, data.second["descriptionId"], file);
        release(dialog_id, data.second["dialogId"], file);
        release(optimal_level, data.second["optimalLevel"], file);
        release(duration, data.second["duration"], file);
        release(kamas_scale_with_player_level, data.second["kamasScaleWithPlayerLevel"], file);
        release(kamas_ratio, data.second["kamasRatio"], file);
        release(xp_ratio, data.second["xpRatio"], file);
        release(objective_ids, data.second["objectiveIds"], file);
        release(rewards_ids, data.second["rewardsIds"], file);
        return data;
    }
#endif
}
#endif