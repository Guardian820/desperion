//  Generated by desperion protocol_builder

#ifndef d2fstream_achievement_reward_hpp
#define d2fstream_achievement_reward_hpp

namespace datacenter
{
    struct achievement_reward : data_holder
    {
        int32_t id;
        int32_t achievement_id;
        int32_t level_min;
        int32_t level_max;
        std::vector<uint32_t> items_reward;
        std::vector<uint32_t> items_quantity_reward;
        std::vector<uint32_t> emotes_reward;
        std::vector<uint32_t> spells_reward;
        std::vector<uint32_t> titles_reward;
        std::vector<uint32_t> ornaments_reward;
        
        achievement_reward() = default;
        
        achievement_reward(const int32_t & id, const int32_t & achievement_id, const int32_t & level_min, const int32_t & level_max, const std::vector<uint32_t> & items_reward, const std::vector<uint32_t> & items_quantity_reward, const std::vector<uint32_t> & emotes_reward, const std::vector<uint32_t> & spells_reward, const std::vector<uint32_t> & titles_reward, const std::vector<uint32_t> & ornaments_reward) : id { id }, achievement_id { achievement_id }, level_min { level_min }, level_max { level_max }, items_reward { items_reward }, items_quantity_reward { items_quantity_reward }, emotes_reward { emotes_reward }, spells_reward { spells_reward }, titles_reward { titles_reward }, ornaments_reward { ornaments_reward }
        {
        }
        
        achievement_reward(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(achievement_id, data.second.at("achievementId"));
            acquire(level_min, data.second.at("levelMin"));
            acquire(level_max, data.second.at("levelMax"));
            acquire(items_reward, data.second.at("itemsReward"));
            acquire(items_quantity_reward, data.second.at("itemsQuantityReward"));
            acquire(emotes_reward, data.second.at("emotesReward"));
            acquire(spells_reward, data.second.at("spellsReward"));
            acquire(titles_reward, data.second.at("titlesReward"));
            acquire(ornaments_reward, data.second.at("ornamentsReward"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<achievement_reward>();
        release(id, data.second["id"], file);
        release(achievement_id, data.second["achievementId"], file);
        release(level_min, data.second["levelMin"], file);
        release(level_max, data.second["levelMax"], file);
        release(items_reward, data.second["itemsReward"], file);
        release(items_quantity_reward, data.second["itemsQuantityReward"], file);
        release(emotes_reward, data.second["emotesReward"], file);
        release(spells_reward, data.second["spellsReward"], file);
        release(titles_reward, data.second["titlesReward"], file);
        release(ornaments_reward, data.second["ornamentsReward"], file);
        return data;
    }
#endif
}
#endif