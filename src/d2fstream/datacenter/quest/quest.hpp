//  Generated by desperion protocol_builder

#ifndef d2fstream_quest_hpp
#define d2fstream_quest_hpp

namespace datacenter
{
    struct quest : data_holder
    {
        int32_t id;
        int32_t name_id;
        std::vector<uint32_t> step_ids;
        int32_t category_id;
        bool is_repeatable;
        int32_t repeat_type;
        int32_t repeat_limit;
        bool is_dungeon_quest;
        int32_t level_min;
        int32_t level_max;
        
        quest() = default;
        
        quest(const int32_t & id, const int32_t & name_id, const std::vector<uint32_t> & step_ids, const int32_t & category_id, const bool & is_repeatable, const int32_t & repeat_type, const int32_t & repeat_limit, const bool & is_dungeon_quest, const int32_t & level_min, const int32_t & level_max) : id { id }, name_id { name_id }, step_ids { step_ids }, category_id { category_id }, is_repeatable { is_repeatable }, repeat_type { repeat_type }, repeat_limit { repeat_limit }, is_dungeon_quest { is_dungeon_quest }, level_min { level_min }, level_max { level_max }
        {
        }
        
        quest(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(name_id, data.second.at("nameId"));
            acquire(step_ids, data.second.at("stepIds"));
            acquire(category_id, data.second.at("categoryId"));
            acquire(is_repeatable, data.second.at("isRepeatable"));
            acquire(repeat_type, data.second.at("repeatType"));
            acquire(repeat_limit, data.second.at("repeatLimit"));
            acquire(is_dungeon_quest, data.second.at("isDungeonQuest"));
            acquire(level_min, data.second.at("levelMin"));
            acquire(level_max, data.second.at("levelMax"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<quest>();
        release(id, data.second["id"], file);
        release(name_id, data.second["nameId"], file);
        release(step_ids, data.second["stepIds"], file);
        release(category_id, data.second["categoryId"], file);
        release(is_repeatable, data.second["isRepeatable"], file);
        release(repeat_type, data.second["repeatType"], file);
        release(repeat_limit, data.second["repeatLimit"], file);
        release(is_dungeon_quest, data.second["isDungeonQuest"], file);
        release(level_min, data.second["levelMin"], file);
        release(level_max, data.second["levelMax"], file);
        return data;
    }
#endif
}
#endif