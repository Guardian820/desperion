//  Generated by desperion protocol_builder

#ifndef d2fstream_achievement_hpp
#define d2fstream_achievement_hpp

namespace datacenter
{
    struct achievement : data_holder
    {
        int32_t id;
        int32_t name_id;
        int32_t category_id;
        int32_t description_id;
        int32_t icon_id;
        int32_t points;
        int32_t level;
        int32_t order;
        double kamas_ratio;
        double experience_ratio;
        bool kamas_scale_with_player_level;
        std::vector<int32_t> objective_ids;
        std::vector<int32_t> reward_ids;
        
        achievement() = default;
        
        achievement(const int32_t & id, const int32_t & name_id, const int32_t & category_id, const int32_t & description_id, const int32_t & icon_id, const int32_t & points, const int32_t & level, const int32_t & order, const double & kamas_ratio, const double & experience_ratio, const bool & kamas_scale_with_player_level, const std::vector<int32_t> & objective_ids, const std::vector<int32_t> & reward_ids) : id { id }, name_id { name_id }, category_id { category_id }, description_id { description_id }, icon_id { icon_id }, points { points }, level { level }, order { order }, kamas_ratio { kamas_ratio }, experience_ratio { experience_ratio }, kamas_scale_with_player_level { kamas_scale_with_player_level }, objective_ids { objective_ids }, reward_ids { reward_ids }
        {
        }
        
        achievement(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(name_id, data.second.at("nameId"));
            acquire(category_id, data.second.at("categoryId"));
            acquire(description_id, data.second.at("descriptionId"));
            acquire(icon_id, data.second.at("iconId"));
            acquire(points, data.second.at("points"));
            acquire(level, data.second.at("level"));
            acquire(order, data.second.at("order"));
            acquire(kamas_ratio, data.second.at("kamasRatio"));
            acquire(experience_ratio, data.second.at("experienceRatio"));
            acquire(kamas_scale_with_player_level, data.second.at("kamasScaleWithPlayerLevel"));
            acquire(objective_ids, data.second.at("objectiveIds"));
            acquire(reward_ids, data.second.at("rewardIds"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<achievement>();
        release(id, data.second["id"], file);
        release(name_id, data.second["nameId"], file);
        release(category_id, data.second["categoryId"], file);
        release(description_id, data.second["descriptionId"], file);
        release(icon_id, data.second["iconId"], file);
        release(points, data.second["points"], file);
        release(level, data.second["level"], file);
        release(order, data.second["order"], file);
        release(kamas_ratio, data.second["kamasRatio"], file);
        release(experience_ratio, data.second["experienceRatio"], file);
        release(kamas_scale_with_player_level, data.second["kamasScaleWithPlayerLevel"], file);
        release(objective_ids, data.second["objectiveIds"], file);
        release(reward_ids, data.second["rewardIds"], file);
        return data;
    }
#endif
}
#endif