//  Generated by desperion protocol_builder

#ifndef d2fstream_quest_objective_hpp
#define d2fstream_quest_objective_hpp

namespace datacenter
{
    struct quest_objective : data_holder
    {
        int32_t id;
        int32_t step_id;
        int32_t type_id;
        int32_t dialog_id;
        std::vector<uint32_t> parameters;
        point coords;
        
        quest_objective() = default;
        
        quest_objective(const int32_t & id, const int32_t & step_id, const int32_t & type_id, const int32_t & dialog_id, const std::vector<uint32_t> & parameters, const point & coords) : id { id }, step_id { step_id }, type_id { type_id }, dialog_id { dialog_id }, parameters { parameters }, coords { coords }
        {
        }
        
        quest_objective(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(step_id, data.second.at("stepId"));
            acquire(type_id, data.second.at("typeId"));
            acquire(dialog_id, data.second.at("dialogId"));
            acquire(parameters, data.second.at("parameters"));
            acquire(coords, data.second.at("coords"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<quest_objective>();
        release(id, data.second["id"], file);
        release(step_id, data.second["stepId"], file);
        release(type_id, data.second["typeId"], file);
        release(dialog_id, data.second["dialogId"], file);
        release(parameters, data.second["parameters"], file);
        release(coords, data.second["coords"], file);
        return data;
    }
#endif
}
#endif