//  Generated by desperion protocol_builder

#ifndef d2fstream_world_map_hpp
#define d2fstream_world_map_hpp

namespace datacenter
{
    struct world_map : data_holder
    {
        int32_t id;
        int32_t origine_x;
        int32_t origine_y;
        double map_width;
        double map_height;
        int32_t horizontal_chunck;
        int32_t vertical_chunck;
        bool viewable_everywhere;
        double min_scale;
        double max_scale;
        double start_scale;
        int32_t center_x;
        int32_t center_y;
        int32_t total_width;
        int32_t total_height;
        std::vector<std::string> zoom;
        
        world_map() = default;
        
        world_map(const int32_t & id, const int32_t & origine_x, const int32_t & origine_y, const double & map_width, const double & map_height, const int32_t & horizontal_chunck, const int32_t & vertical_chunck, const bool & viewable_everywhere, const double & min_scale, const double & max_scale, const double & start_scale, const int32_t & center_x, const int32_t & center_y, const int32_t & total_width, const int32_t & total_height, const std::vector<std::string> & zoom) : id { id }, origine_x { origine_x }, origine_y { origine_y }, map_width { map_width }, map_height { map_height }, horizontal_chunck { horizontal_chunck }, vertical_chunck { vertical_chunck }, viewable_everywhere { viewable_everywhere }, min_scale { min_scale }, max_scale { max_scale }, start_scale { start_scale }, center_x { center_x }, center_y { center_y }, total_width { total_width }, total_height { total_height }, zoom { zoom }
        {
        }
        
        world_map(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(origine_x, data.second.at("origineX"));
            acquire(origine_y, data.second.at("origineY"));
            acquire(map_width, data.second.at("mapWidth"));
            acquire(map_height, data.second.at("mapHeight"));
            acquire(horizontal_chunck, data.second.at("horizontalChunck"));
            acquire(vertical_chunck, data.second.at("verticalChunck"));
            acquire(viewable_everywhere, data.second.at("viewableEverywhere"));
            acquire(min_scale, data.second.at("minScale"));
            acquire(max_scale, data.second.at("maxScale"));
            acquire(start_scale, data.second.at("startScale"));
            acquire(center_x, data.second.at("centerX"));
            acquire(center_y, data.second.at("centerY"));
            acquire(total_width, data.second.at("totalWidth"));
            acquire(total_height, data.second.at("totalHeight"));
            acquire(zoom, data.second.at("zoom"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<world_map>();
        release(id, data.second["id"], file);
        release(origine_x, data.second["origineX"], file);
        release(origine_y, data.second["origineY"], file);
        release(map_width, data.second["mapWidth"], file);
        release(map_height, data.second["mapHeight"], file);
        release(horizontal_chunck, data.second["horizontalChunck"], file);
        release(vertical_chunck, data.second["verticalChunck"], file);
        release(viewable_everywhere, data.second["viewableEverywhere"], file);
        release(min_scale, data.second["minScale"], file);
        release(max_scale, data.second["maxScale"], file);
        release(start_scale, data.second["startScale"], file);
        release(center_x, data.second["centerX"], file);
        release(center_y, data.second["centerY"], file);
        release(total_width, data.second["totalWidth"], file);
        release(total_height, data.second["totalHeight"], file);
        release(zoom, data.second["zoom"], file);
        return data;
    }
#endif
}
#endif