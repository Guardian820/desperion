//  Generated by desperion protocol_builder

#ifndef d2fstream_area_hpp
#define d2fstream_area_hpp

namespace datacenter
{
    struct area : data_holder
    {
        int32_t id;
        int32_t name_id;
        int32_t super_area_id;
        bool contain_houses;
        bool contain_paddocks;
        rectangle bounds;
        
        area() = default;
        
        area(const int32_t & id, const int32_t & name_id, const int32_t & super_area_id, const bool & contain_houses, const bool & contain_paddocks, const rectangle & bounds) : id { id }, name_id { name_id }, super_area_id { super_area_id }, contain_houses { contain_houses }, contain_paddocks { contain_paddocks }, bounds { bounds }
        {
        }
        
        area(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(name_id, data.second.at("nameId"));
            acquire(super_area_id, data.second.at("superAreaId"));
            acquire(contain_houses, data.second.at("containHouses"));
            acquire(contain_paddocks, data.second.at("containPaddocks"));
            acquire(bounds, data.second.at("bounds"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<area>();
        release(id, data.second["id"], file);
        release(name_id, data.second["nameId"], file);
        release(super_area_id, data.second["superAreaId"], file);
        release(contain_houses, data.second["containHouses"], file);
        release(contain_paddocks, data.second["containPaddocks"], file);
        release(bounds, data.second["bounds"], file);
        return data;
    }
#endif
}
#endif