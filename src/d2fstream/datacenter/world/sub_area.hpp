//  Generated by desperion protocol_builder

#ifndef d2fstream_sub_area_hpp
#define d2fstream_sub_area_hpp

namespace datacenter
{
    struct sub_area : data_holder
    {
        int32_t id;
        int32_t name_id;
        int32_t area_id;
        std::vector<ambient_sound> ambient_sounds;
        std::vector<uint32_t> map_ids;
        rectangle bounds;
        std::vector<int32_t> shape;
        std::vector<uint32_t> custom_world_map;
        int32_t pack_id;
        int32_t level;
        bool display_on_world_map;
        std::vector<uint32_t> monsters;
        
        sub_area() = default;
        
        sub_area(const int32_t & id, const int32_t & name_id, const int32_t & area_id, const std::vector<ambient_sound> & ambient_sounds, const std::vector<uint32_t> & map_ids, const rectangle & bounds, const std::vector<int32_t> & shape, const std::vector<uint32_t> & custom_world_map, const int32_t & pack_id, const int32_t & level, const bool & display_on_world_map, const std::vector<uint32_t> & monsters) : id { id }, name_id { name_id }, area_id { area_id }, ambient_sounds { ambient_sounds }, map_ids { map_ids }, bounds { bounds }, shape { shape }, custom_world_map { custom_world_map }, pack_id { pack_id }, level { level }, display_on_world_map { display_on_world_map }, monsters { monsters }
        {
        }
        
        sub_area(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(name_id, data.second.at("nameId"));
            acquire(area_id, data.second.at("areaId"));
            acquire(ambient_sounds, data.second.at("ambientSounds"));
            acquire(map_ids, data.second.at("mapIds"));
            acquire(bounds, data.second.at("bounds"));
            acquire(shape, data.second.at("shape"));
            acquire(custom_world_map, data.second.at("customWorldMap"));
            acquire(pack_id, data.second.at("packId"));
            acquire(level, data.second.at("level"));
            acquire(display_on_world_map, data.second.at("displayOnWorldMap"));
            acquire(monsters, data.second.at("monsters"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<sub_area>();
        release(id, data.second["id"], file);
        release(name_id, data.second["nameId"], file);
        release(area_id, data.second["areaId"], file);
        release(ambient_sounds, data.second["ambientSounds"], file);
        release(map_ids, data.second["mapIds"], file);
        release(bounds, data.second["bounds"], file);
        release(shape, data.second["shape"], file);
        release(custom_world_map, data.second["customWorldMap"], file);
        release(pack_id, data.second["packId"], file);
        release(level, data.second["level"], file);
        release(display_on_world_map, data.second["displayOnWorldMap"], file);
        release(monsters, data.second["monsters"], file);
        return data;
    }
#endif
}
#endif