//  Generated by desperion protocol_builder

#ifndef d2fstream_effect_instance_ladder_hpp
#define d2fstream_effect_instance_ladder_hpp

namespace datacenter
{
    struct effect_instance_ladder : effect_instance_creature
    {
        int32_t monster_count;
        
        effect_instance_ladder() = default;
        
        effect_instance_ladder(const int32_t & monster_family_id, const int32_t & effect_id, const int32_t & target_id, const std::string & target_mask, const int32_t & duration, const int32_t & delay, const int32_t & random, const int32_t & group, const int32_t & modificator, const bool & trigger, const bool & hidden, const int32_t & zone_size, const int32_t & zone_shape, const int32_t & zone_min_size, const int32_t & monster_count) : effect_instance_creature { monster_family_id, effect_id, target_id, target_mask, duration, delay, random, group, modificator, trigger, hidden, zone_size, zone_shape, zone_min_size }, monster_count { monster_count }
        {
        }
        
        effect_instance_ladder(data_object && data) : effect_instance_creature { std::forward<data_object>(data) }
        {
            acquire(monster_count, data.second.at("monsterCount"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data = effect_instance_creature::to_d2o(file);
        data.first = file.get_class_id_for_type<effect_instance_ladder>();
        release(monster_count, data.second["monsterCount"], file);
        return data;
    }
#endif
}
#endif