//  Generated by desperion protocol_builder

#ifndef d2fstream_effect_instance_dice_hpp
#define d2fstream_effect_instance_dice_hpp

namespace datacenter
{
    struct effect_instance_dice : effect_instance_integer
    {
        int32_t dice_num;
        int32_t dice_side;
        
        effect_instance_dice() = default;
        
        effect_instance_dice(const int32_t & value, const int32_t & effect_id, const int32_t & target_id, const std::string & target_mask, const int32_t & duration, const int32_t & delay, const int32_t & random, const int32_t & group, const int32_t & modificator, const bool & trigger, const bool & hidden, const int32_t & zone_size, const int32_t & zone_shape, const int32_t & zone_min_size, const int32_t & dice_num, const int32_t & dice_side) : effect_instance_integer { value, effect_id, target_id, target_mask, duration, delay, random, group, modificator, trigger, hidden, zone_size, zone_shape, zone_min_size }, dice_num { dice_num }, dice_side { dice_side }
        {
        }
        
        effect_instance_dice(data_object && data) : effect_instance_integer { std::forward<data_object>(data) }
        {
            acquire(dice_num, data.second.at("diceNum"));
            acquire(dice_side, data.second.at("diceSide"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data = effect_instance_integer::to_d2o(file);
        data.first = file.get_class_id_for_type<effect_instance_dice>();
        release(dice_num, data.second["diceNum"], file);
        release(dice_side, data.second["diceSide"], file);
        return data;
    }
#endif
}
#endif