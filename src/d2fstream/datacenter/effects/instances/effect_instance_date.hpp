//  Generated by desperion protocol_builder

#ifndef d2fstream_effect_instance_date_hpp
#define d2fstream_effect_instance_date_hpp

namespace datacenter
{
    struct effect_instance_date : effect_instance
    {
        int32_t year;
        int32_t month;
        int32_t day;
        int32_t hour;
        int32_t minute;
        
        effect_instance_date() = default;
        
        effect_instance_date(const int32_t & effect_id, const int32_t & target_id, const std::string & target_mask, const int32_t & duration, const int32_t & delay, const int32_t & random, const int32_t & group, const int32_t & modificator, const bool & trigger, const bool & hidden, const int32_t & zone_size, const int32_t & zone_shape, const int32_t & zone_min_size, const int32_t & year, const int32_t & month, const int32_t & day, const int32_t & hour, const int32_t & minute) : effect_instance { effect_id, target_id, target_mask, duration, delay, random, group, modificator, trigger, hidden, zone_size, zone_shape, zone_min_size }, year { year }, month { month }, day { day }, hour { hour }, minute { minute }
        {
        }
        
        effect_instance_date(data_object && data) : effect_instance { std::forward<data_object>(data) }
        {
            acquire(year, data.second.at("year"));
            acquire(month, data.second.at("month"));
            acquire(day, data.second.at("day"));
            acquire(hour, data.second.at("hour"));
            acquire(minute, data.second.at("minute"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data = effect_instance::to_d2o(file);
        data.first = file.get_class_id_for_type<effect_instance_date>();
        release(year, data.second["year"], file);
        release(month, data.second["month"], file);
        release(day, data.second["day"], file);
        release(hour, data.second["hour"], file);
        release(minute, data.second["minute"], file);
        return data;
    }
#endif
}
#endif