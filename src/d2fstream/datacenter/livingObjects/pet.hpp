//  Generated by desperion protocol_builder

#ifndef d2fstream_pet_hpp
#define d2fstream_pet_hpp

namespace datacenter
{
    struct pet : data_holder
    {
        int32_t id;
        std::vector<int32_t> food_items;
        std::vector<int32_t> food_types;
        
        pet() = default;
        
        pet(const int32_t & id, const std::vector<int32_t> & food_items, const std::vector<int32_t> & food_types) : id { id }, food_items { food_items }, food_types { food_types }
        {
        }
        
        pet(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(food_items, data.second.at("foodItems"));
            acquire(food_types, data.second.at("foodTypes"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<pet>();
        release(id, data.second["id"], file);
        release(food_items, data.second["foodItems"], file);
        release(food_types, data.second["foodTypes"], file);
        return data;
    }
#endif
}
#endif