//  Generated by desperion protocol_builder

#ifndef d2fstream_speaking_item_text_hpp
#define d2fstream_speaking_item_text_hpp

namespace datacenter
{
    struct speaking_item_text : data_holder
    {
        int32_t text_id;
        double text_proba;
        int32_t text_string_id;
        int32_t text_level;
        int32_t text_sound;
        std::string text_restriction;
        
        speaking_item_text() = default;
        
        speaking_item_text(const int32_t & text_id, const double & text_proba, const int32_t & text_string_id, const int32_t & text_level, const int32_t & text_sound, const std::string & text_restriction) : text_id { text_id }, text_proba { text_proba }, text_string_id { text_string_id }, text_level { text_level }, text_sound { text_sound }, text_restriction { text_restriction }
        {
        }
        
        speaking_item_text(data_object && data)
        {
            acquire(text_id, data.second.at("textId"));
            acquire(text_proba, data.second.at("textProba"));
            acquire(text_string_id, data.second.at("textStringId"));
            acquire(text_level, data.second.at("textLevel"));
            acquire(text_sound, data.second.at("textSound"));
            acquire(text_restriction, data.second.at("textRestriction"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<speaking_item_text>();
        release(text_id, data.second["textId"], file);
        release(text_proba, data.second["textProba"], file);
        release(text_string_id, data.second["textStringId"], file);
        release(text_level, data.second["textLevel"], file);
        release(text_sound, data.second["textSound"], file);
        release(text_restriction, data.second["textRestriction"], file);
        return data;
    }
#endif
}
#endif