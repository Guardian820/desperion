//  Generated by desperion protocol_builder

#ifndef d2fstream_house_hpp
#define d2fstream_house_hpp

namespace datacenter
{
    struct house : data_holder
    {
        int32_t type_id;
        int32_t default_price;
        int32_t name_id;
        int32_t description_id;
        int32_t gfx_id;
        
        house() = default;
        
        house(const int32_t & type_id, const int32_t & default_price, const int32_t & name_id, const int32_t & description_id, const int32_t & gfx_id) : type_id { type_id }, default_price { default_price }, name_id { name_id }, description_id { description_id }, gfx_id { gfx_id }
        {
        }
        
        house(data_object && data)
        {
            acquire(type_id, data.second.at("typeId"));
            acquire(default_price, data.second.at("defaultPrice"));
            acquire(name_id, data.second.at("nameId"));
            acquire(description_id, data.second.at("descriptionId"));
            acquire(gfx_id, data.second.at("gfxId"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<house>();
        release(type_id, data.second["typeId"], file);
        release(default_price, data.second["defaultPrice"], file);
        release(name_id, data.second["nameId"], file);
        release(description_id, data.second["descriptionId"], file);
        release(gfx_id, data.second["gfxId"], file);
        return data;
    }
#endif
}
#endif