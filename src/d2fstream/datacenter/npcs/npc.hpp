//  Generated by desperion protocol_builder

#ifndef d2fstream_npc_hpp
#define d2fstream_npc_hpp

namespace datacenter
{
    struct npc : data_holder
    {
        int32_t id;
        int32_t name_id;
        std::vector<int32_t> dialog_messages;
        std::vector<int32_t> dialog_replies;
        std::vector<uint32_t> actions;
        int32_t gender;
        std::string look;
        int32_t token_shop;
        std::vector<anim_fun_npc_data> anim_fun_list;
        
        npc() = default;
        
        npc(const int32_t & id, const int32_t & name_id, const std::vector<int32_t> & dialog_messages, const std::vector<int32_t> & dialog_replies, const std::vector<uint32_t> & actions, const int32_t & gender, const std::string & look, const int32_t & token_shop, const std::vector<anim_fun_npc_data> & anim_fun_list) : id { id }, name_id { name_id }, dialog_messages { dialog_messages }, dialog_replies { dialog_replies }, actions { actions }, gender { gender }, look { look }, token_shop { token_shop }, anim_fun_list { anim_fun_list }
        {
        }
        
        npc(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(name_id, data.second.at("nameId"));
            acquire(dialog_messages, data.second.at("dialogMessages"));
            acquire(dialog_replies, data.second.at("dialogReplies"));
            acquire(actions, data.second.at("actions"));
            acquire(gender, data.second.at("gender"));
            acquire(look, data.second.at("look"));
            acquire(token_shop, data.second.at("tokenShop"));
            acquire(anim_fun_list, data.second.at("animFunList"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<npc>();
        release(id, data.second["id"], file);
        release(name_id, data.second["nameId"], file);
        release(dialog_messages, data.second["dialogMessages"], file);
        release(dialog_replies, data.second["dialogReplies"], file);
        release(actions, data.second["actions"], file);
        release(gender, data.second["gender"], file);
        release(look, data.second["look"], file);
        release(token_shop, data.second["tokenShop"], file);
        release(anim_fun_list, data.second["animFunList"], file);
        return data;
    }
#endif
}
#endif