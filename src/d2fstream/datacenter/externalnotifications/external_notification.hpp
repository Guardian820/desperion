//  Generated by desperion protocol_builder

#ifndef d2fstream_external_notification_hpp
#define d2fstream_external_notification_hpp

namespace datacenter
{
    struct external_notification : data_holder
    {
        int32_t id;
        int32_t category_id;
        int32_t icon_id;
        int32_t color_id;
        int32_t description_id;
        bool default_enable;
        bool default_sound;
        bool default_notify;
        bool default_multi_account;
        std::string name;
        int32_t message_id;
        
        external_notification() = default;
        
        external_notification(const int32_t & id, const int32_t & category_id, const int32_t & icon_id, const int32_t & color_id, const int32_t & description_id, const bool & default_enable, const bool & default_sound, const bool & default_notify, const bool & default_multi_account, const std::string & name, const int32_t & message_id) : id { id }, category_id { category_id }, icon_id { icon_id }, color_id { color_id }, description_id { description_id }, default_enable { default_enable }, default_sound { default_sound }, default_notify { default_notify }, default_multi_account { default_multi_account }, name { name }, message_id { message_id }
        {
        }
        
        external_notification(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(category_id, data.second.at("categoryId"));
            acquire(icon_id, data.second.at("iconId"));
            acquire(color_id, data.second.at("colorId"));
            acquire(description_id, data.second.at("descriptionId"));
            acquire(default_enable, data.second.at("defaultEnable"));
            acquire(default_sound, data.second.at("defaultSound"));
            acquire(default_notify, data.second.at("defaultNotify"));
            acquire(default_multi_account, data.second.at("defaultMultiAccount"));
            acquire(name, data.second.at("name"));
            acquire(message_id, data.second.at("messageId"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<external_notification>();
        release(id, data.second["id"], file);
        release(category_id, data.second["categoryId"], file);
        release(icon_id, data.second["iconId"], file);
        release(color_id, data.second["colorId"], file);
        release(description_id, data.second["descriptionId"], file);
        release(default_enable, data.second["defaultEnable"], file);
        release(default_sound, data.second["defaultSound"], file);
        release(default_notify, data.second["defaultNotify"], file);
        release(default_multi_account, data.second["defaultMultiAccount"], file);
        release(name, data.second["name"], file);
        release(message_id, data.second["messageId"], file);
        return data;
    }
#endif
}
#endif