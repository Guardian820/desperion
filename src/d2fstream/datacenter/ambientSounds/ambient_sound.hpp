//  Generated by desperion protocol_builder

#ifndef d2fstream_ambient_sound_hpp
#define d2fstream_ambient_sound_hpp

namespace datacenter
{
    struct ambient_sound : data_holder
    {
        int32_t id;
        int32_t volume;
        int32_t criterion_id;
        int32_t silence_min;
        int32_t silence_max;
        int32_t channel;
        int32_t type__id;
        
        ambient_sound() = default;
        
        ambient_sound(const int32_t & id, const int32_t & volume, const int32_t & criterion_id, const int32_t & silence_min, const int32_t & silence_max, const int32_t & channel, const int32_t & type__id) : id { id }, volume { volume }, criterion_id { criterion_id }, silence_min { silence_min }, silence_max { silence_max }, channel { channel }, type__id { type__id }
        {
        }
        
        ambient_sound(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(volume, data.second.at("volume"));
            acquire(criterion_id, data.second.at("criterionId"));
            acquire(silence_min, data.second.at("silenceMin"));
            acquire(silence_max, data.second.at("silenceMax"));
            acquire(channel, data.second.at("channel"));
            acquire(type__id, data.second.at("type_id"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<ambient_sound>();
        release(id, data.second["id"], file);
        release(volume, data.second["volume"], file);
        release(criterion_id, data.second["criterionId"], file);
        release(silence_min, data.second["silenceMin"], file);
        release(silence_max, data.second["silenceMax"], file);
        release(channel, data.second["channel"], file);
        release(type__id, data.second["type_id"], file);
        return data;
    }
#endif
}
#endif