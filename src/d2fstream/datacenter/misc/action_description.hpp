//  Generated by desperion protocol_builder

#ifndef d2fstream_action_description_hpp
#define d2fstream_action_description_hpp

namespace datacenter
{
    struct action_description : data_holder
    {
        int32_t id;
        int32_t type_id;
        std::string name;
        int32_t description_id;
        bool trusted;
        bool need_interaction;
        int32_t max_use_per_frame;
        int32_t minimal_use_interval;
        bool need_confirmation;
        
        action_description() = default;
        
        action_description(const int32_t & id, const int32_t & type_id, const std::string & name, const int32_t & description_id, const bool & trusted, const bool & need_interaction, const int32_t & max_use_per_frame, const int32_t & minimal_use_interval, const bool & need_confirmation) : id { id }, type_id { type_id }, name { name }, description_id { description_id }, trusted { trusted }, need_interaction { need_interaction }, max_use_per_frame { max_use_per_frame }, minimal_use_interval { minimal_use_interval }, need_confirmation { need_confirmation }
        {
        }
        
        action_description(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(type_id, data.second.at("typeId"));
            acquire(name, data.second.at("name"));
            acquire(description_id, data.second.at("descriptionId"));
            acquire(trusted, data.second.at("trusted"));
            acquire(need_interaction, data.second.at("needInteraction"));
            acquire(max_use_per_frame, data.second.at("maxUsePerFrame"));
            acquire(minimal_use_interval, data.second.at("minimalUseInterval"));
            acquire(need_confirmation, data.second.at("needConfirmation"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<action_description>();
        release(id, data.second["id"], file);
        release(type_id, data.second["typeId"], file);
        release(name, data.second["name"], file);
        release(description_id, data.second["descriptionId"], file);
        release(trusted, data.second["trusted"], file);
        release(need_interaction, data.second["needInteraction"], file);
        release(max_use_per_frame, data.second["maxUsePerFrame"], file);
        release(minimal_use_interval, data.second["minimalUseInterval"], file);
        release(need_confirmation, data.second["needConfirmation"], file);
        return data;
    }
#endif
}
#endif