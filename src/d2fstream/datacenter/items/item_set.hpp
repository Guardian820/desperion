//  Generated by desperion protocol_builder

#ifndef d2fstream_item_set_hpp
#define d2fstream_item_set_hpp

namespace datacenter
{
    struct item_set : data_holder
    {
        int32_t id;
        std::vector<uint32_t> items;
        int32_t name_id;
        std::vector<effect_instance> effects;
        bool bonus_is_secret;
        
        item_set() = default;
        
        item_set(const int32_t & id, const std::vector<uint32_t> & items, const int32_t & name_id, const std::vector<effect_instance> & effects, const bool & bonus_is_secret) : id { id }, items { items }, name_id { name_id }, effects { effects }, bonus_is_secret { bonus_is_secret }
        {
        }
        
        item_set(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(items, data.second.at("items"));
            acquire(name_id, data.second.at("nameId"));
            acquire(effects, data.second.at("effects"));
            acquire(bonus_is_secret, data.second.at("bonusIsSecret"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<item_set>();
        release(id, data.second["id"], file);
        release(items, data.second["items"], file);
        release(name_id, data.second["nameId"], file);
        release(effects, data.second["effects"], file);
        release(bonus_is_secret, data.second["bonusIsSecret"], file);
        return data;
    }
#endif
}
#endif