//  Generated by desperion protocol_builder

#ifndef d2fstream_item_hpp
#define d2fstream_item_hpp

namespace datacenter
{
    struct item : data_holder
    {
        int32_t id;
        int32_t name_id;
        int32_t type_id;
        int32_t description_id;
        int32_t icon_id;
        int32_t level;
        int32_t real_weight;
        bool cursed;
        int32_t use_animation_id;
        bool usable;
        bool targetable;
        double price;
        bool two_handed;
        bool etheral;
        int32_t item_set_id;
        std::string criteria;
        std::string criteria_target;
        bool hide_effects;
        bool enhanceable;
        bool non_usable_on_another;
        int32_t appearance_id;
        bool secret_recipe;
        std::vector<uint32_t> drop_monster_ids;
        int32_t recipe_slots;
        std::vector<uint32_t> recipe_ids;
        bool bonus_is_secret;
        std::vector<effect_instance> possible_effects;
        std::vector<uint32_t> favorite_sub_areas;
        int32_t favorite_sub_areas_bonus;
        
        item() = default;
        
        item(const int32_t & id, const int32_t & name_id, const int32_t & type_id, const int32_t & description_id, const int32_t & icon_id, const int32_t & level, const int32_t & real_weight, const bool & cursed, const int32_t & use_animation_id, const bool & usable, const bool & targetable, const double & price, const bool & two_handed, const bool & etheral, const int32_t & item_set_id, const std::string & criteria, const std::string & criteria_target, const bool & hide_effects, const bool & enhanceable, const bool & non_usable_on_another, const int32_t & appearance_id, const bool & secret_recipe, const std::vector<uint32_t> & drop_monster_ids, const int32_t & recipe_slots, const std::vector<uint32_t> & recipe_ids, const bool & bonus_is_secret, const std::vector<effect_instance> & possible_effects, const std::vector<uint32_t> & favorite_sub_areas, const int32_t & favorite_sub_areas_bonus) : id { id }, name_id { name_id }, type_id { type_id }, description_id { description_id }, icon_id { icon_id }, level { level }, real_weight { real_weight }, cursed { cursed }, use_animation_id { use_animation_id }, usable { usable }, targetable { targetable }, price { price }, two_handed { two_handed }, etheral { etheral }, item_set_id { item_set_id }, criteria { criteria }, criteria_target { criteria_target }, hide_effects { hide_effects }, enhanceable { enhanceable }, non_usable_on_another { non_usable_on_another }, appearance_id { appearance_id }, secret_recipe { secret_recipe }, drop_monster_ids { drop_monster_ids }, recipe_slots { recipe_slots }, recipe_ids { recipe_ids }, bonus_is_secret { bonus_is_secret }, possible_effects { possible_effects }, favorite_sub_areas { favorite_sub_areas }, favorite_sub_areas_bonus { favorite_sub_areas_bonus }
        {
        }
        
        item(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(name_id, data.second.at("nameId"));
            acquire(type_id, data.second.at("typeId"));
            acquire(description_id, data.second.at("descriptionId"));
            acquire(icon_id, data.second.at("iconId"));
            acquire(level, data.second.at("level"));
            acquire(real_weight, data.second.at("realWeight"));
            acquire(cursed, data.second.at("cursed"));
            acquire(use_animation_id, data.second.at("useAnimationId"));
            acquire(usable, data.second.at("usable"));
            acquire(targetable, data.second.at("targetable"));
            acquire(price, data.second.at("price"));
            acquire(two_handed, data.second.at("twoHanded"));
            acquire(etheral, data.second.at("etheral"));
            acquire(item_set_id, data.second.at("itemSetId"));
            acquire(criteria, data.second.at("criteria"));
            acquire(criteria_target, data.second.at("criteriaTarget"));
            acquire(hide_effects, data.second.at("hideEffects"));
            acquire(enhanceable, data.second.at("enhanceable"));
            acquire(non_usable_on_another, data.second.at("nonUsableOnAnother"));
            acquire(appearance_id, data.second.at("appearanceId"));
            acquire(secret_recipe, data.second.at("secretRecipe"));
            acquire(drop_monster_ids, data.second.at("dropMonsterIds"));
            acquire(recipe_slots, data.second.at("recipeSlots"));
            acquire(recipe_ids, data.second.at("recipeIds"));
            acquire(bonus_is_secret, data.second.at("bonusIsSecret"));
            acquire(possible_effects, data.second.at("possibleEffects"));
            acquire(favorite_sub_areas, data.second.at("favoriteSubAreas"));
            acquire(favorite_sub_areas_bonus, data.second.at("favoriteSubAreasBonus"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<item>();
        release(id, data.second["id"], file);
        release(name_id, data.second["nameId"], file);
        release(type_id, data.second["typeId"], file);
        release(description_id, data.second["descriptionId"], file);
        release(icon_id, data.second["iconId"], file);
        release(level, data.second["level"], file);
        release(real_weight, data.second["realWeight"], file);
        release(cursed, data.second["cursed"], file);
        release(use_animation_id, data.second["useAnimationId"], file);
        release(usable, data.second["usable"], file);
        release(targetable, data.second["targetable"], file);
        release(price, data.second["price"], file);
        release(two_handed, data.second["twoHanded"], file);
        release(etheral, data.second["etheral"], file);
        release(item_set_id, data.second["itemSetId"], file);
        release(criteria, data.second["criteria"], file);
        release(criteria_target, data.second["criteriaTarget"], file);
        release(hide_effects, data.second["hideEffects"], file);
        release(enhanceable, data.second["enhanceable"], file);
        release(non_usable_on_another, data.second["nonUsableOnAnother"], file);
        release(appearance_id, data.second["appearanceId"], file);
        release(secret_recipe, data.second["secretRecipe"], file);
        release(drop_monster_ids, data.second["dropMonsterIds"], file);
        release(recipe_slots, data.second["recipeSlots"], file);
        release(recipe_ids, data.second["recipeIds"], file);
        release(bonus_is_secret, data.second["bonusIsSecret"], file);
        release(possible_effects, data.second["possibleEffects"], file);
        release(favorite_sub_areas, data.second["favoriteSubAreas"], file);
        release(favorite_sub_areas_bonus, data.second["favoriteSubAreasBonus"], file);
        return data;
    }
#endif
}
#endif