//  Generated by desperion protocol_builder

#ifndef d2fstream_item_type_hpp
#define d2fstream_item_type_hpp

namespace datacenter
{
    struct item_type : data_holder
    {
        int32_t id;
        int32_t name_id;
        int32_t super_type_id;
        bool plural;
        int32_t gender;
        std::string raw_zone;
        bool need_use_confirm;
        
        item_type() = default;
        
        item_type(const int32_t & id, const int32_t & name_id, const int32_t & super_type_id, const bool & plural, const int32_t & gender, const std::string & raw_zone, const bool & need_use_confirm) : id { id }, name_id { name_id }, super_type_id { super_type_id }, plural { plural }, gender { gender }, raw_zone { raw_zone }, need_use_confirm { need_use_confirm }
        {
        }
        
        item_type(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(name_id, data.second.at("nameId"));
            acquire(super_type_id, data.second.at("superTypeId"));
            acquire(plural, data.second.at("plural"));
            acquire(gender, data.second.at("gender"));
            acquire(raw_zone, data.second.at("rawZone"));
            acquire(need_use_confirm, data.second.at("needUseConfirm"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<item_type>();
        release(id, data.second["id"], file);
        release(name_id, data.second["nameId"], file);
        release(super_type_id, data.second["superTypeId"], file);
        release(plural, data.second["plural"], file);
        release(gender, data.second["gender"], file);
        release(raw_zone, data.second["rawZone"], file);
        release(need_use_confirm, data.second["needUseConfirm"], file);
        return data;
    }
#endif
}
#endif