//  Generated by desperion protocol_builder

#ifndef d2fstream_incarnation_level_hpp
#define d2fstream_incarnation_level_hpp

namespace datacenter
{
    struct incarnation_level : data_holder
    {
        int32_t id;
        int32_t incarnation_id;
        int32_t level;
        int32_t required_xp;
        
        incarnation_level() = default;
        
        incarnation_level(const int32_t & id, const int32_t & incarnation_id, const int32_t & level, const int32_t & required_xp) : id { id }, incarnation_id { incarnation_id }, level { level }, required_xp { required_xp }
        {
        }
        
        incarnation_level(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(incarnation_id, data.second.at("incarnationId"));
            acquire(level, data.second.at("level"));
            acquire(required_xp, data.second.at("requiredXp"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<incarnation_level>();
        release(id, data.second["id"], file);
        release(incarnation_id, data.second["incarnationId"], file);
        release(level, data.second["level"], file);
        release(required_xp, data.second["requiredXp"], file);
        return data;
    }
#endif
}
#endif