//  Generated by desperion protocol_builder

#ifndef d2fstream_incarnation_hpp
#define d2fstream_incarnation_hpp

namespace datacenter
{
    struct incarnation : data_holder
    {
        int32_t id;
        std::string look_male;
        std::string look_female;
        
        incarnation() = default;
        
        incarnation(const int32_t & id, const std::string & look_male, const std::string & look_female) : id { id }, look_male { look_male }, look_female { look_female }
        {
        }
        
        incarnation(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(look_male, data.second.at("lookMale"));
            acquire(look_female, data.second.at("lookFemale"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<incarnation>();
        release(id, data.second["id"], file);
        release(look_male, data.second["lookMale"], file);
        release(look_female, data.second["lookFemale"], file);
        return data;
    }
#endif
}
#endif