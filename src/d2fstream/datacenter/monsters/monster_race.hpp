//  Generated by desperion protocol_builder

#ifndef d2fstream_monster_race_hpp
#define d2fstream_monster_race_hpp

namespace datacenter
{
    struct monster_race : data_holder
    {
        int32_t id;
        int32_t super_race_id;
        int32_t name_id;
        std::vector<uint32_t> monsters;
        
        monster_race() = default;
        
        monster_race(const int32_t & id, const int32_t & super_race_id, const int32_t & name_id, const std::vector<uint32_t> & monsters) : id { id }, super_race_id { super_race_id }, name_id { name_id }, monsters { monsters }
        {
        }
        
        monster_race(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(super_race_id, data.second.at("superRaceId"));
            acquire(name_id, data.second.at("nameId"));
            acquire(monsters, data.second.at("monsters"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<monster_race>();
        release(id, data.second["id"], file);
        release(super_race_id, data.second["superRaceId"], file);
        release(name_id, data.second["nameId"], file);
        release(monsters, data.second["monsters"], file);
        return data;
    }
#endif
}
#endif