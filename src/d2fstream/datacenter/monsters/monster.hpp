//  Generated by desperion protocol_builder

#ifndef d2fstream_monster_hpp
#define d2fstream_monster_hpp

namespace datacenter
{
    struct monster : data_holder
    {
        int32_t id;
        int32_t name_id;
        int32_t gfx_id;
        int32_t race;
        std::vector<monster_grade> grades;
        std::string look;
        bool use_summon_slot;
        bool use_bomb_slot;
        bool can_play;
        bool can_tackle;
        std::vector<anim_fun_monster_data> anim_fun_list;
        bool is_boss;
        std::vector<monster_drop> drops;
        std::vector<uint32_t> subareas;
        std::vector<uint32_t> spells;
        int32_t favorite_subarea_id;
        bool is_mini_boss;
        bool is_quest_monster;
        int32_t corresponding_mini_boss_id;
        
        monster() = default;
        
        monster(const int32_t & id, const int32_t & name_id, const int32_t & gfx_id, const int32_t & race, const std::vector<monster_grade> & grades, const std::string & look, const bool & use_summon_slot, const bool & use_bomb_slot, const bool & can_play, const bool & can_tackle, const std::vector<anim_fun_monster_data> & anim_fun_list, const bool & is_boss, const std::vector<monster_drop> & drops, const std::vector<uint32_t> & subareas, const std::vector<uint32_t> & spells, const int32_t & favorite_subarea_id, const bool & is_mini_boss, const bool & is_quest_monster, const int32_t & corresponding_mini_boss_id) : id { id }, name_id { name_id }, gfx_id { gfx_id }, race { race }, grades { grades }, look { look }, use_summon_slot { use_summon_slot }, use_bomb_slot { use_bomb_slot }, can_play { can_play }, can_tackle { can_tackle }, anim_fun_list { anim_fun_list }, is_boss { is_boss }, drops { drops }, subareas { subareas }, spells { spells }, favorite_subarea_id { favorite_subarea_id }, is_mini_boss { is_mini_boss }, is_quest_monster { is_quest_monster }, corresponding_mini_boss_id { corresponding_mini_boss_id }
        {
        }
        
        monster(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(name_id, data.second.at("nameId"));
            acquire(gfx_id, data.second.at("gfxId"));
            acquire(race, data.second.at("race"));
            acquire(grades, data.second.at("grades"));
            acquire(look, data.second.at("look"));
            acquire(use_summon_slot, data.second.at("useSummonSlot"));
            acquire(use_bomb_slot, data.second.at("useBombSlot"));
            acquire(can_play, data.second.at("canPlay"));
            acquire(can_tackle, data.second.at("canTackle"));
            acquire(anim_fun_list, data.second.at("animFunList"));
            acquire(is_boss, data.second.at("isBoss"));
            acquire(drops, data.second.at("drops"));
            acquire(subareas, data.second.at("subareas"));
            acquire(spells, data.second.at("spells"));
            acquire(favorite_subarea_id, data.second.at("favoriteSubareaId"));
            acquire(is_mini_boss, data.second.at("isMiniBoss"));
            acquire(is_quest_monster, data.second.at("isQuestMonster"));
            acquire(corresponding_mini_boss_id, data.second.at("correspondingMiniBossId"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<monster>();
        release(id, data.second["id"], file);
        release(name_id, data.second["nameId"], file);
        release(gfx_id, data.second["gfxId"], file);
        release(race, data.second["race"], file);
        release(grades, data.second["grades"], file);
        release(look, data.second["look"], file);
        release(use_summon_slot, data.second["useSummonSlot"], file);
        release(use_bomb_slot, data.second["useBombSlot"], file);
        release(can_play, data.second["canPlay"], file);
        release(can_tackle, data.second["canTackle"], file);
        release(anim_fun_list, data.second["animFunList"], file);
        release(is_boss, data.second["isBoss"], file);
        release(drops, data.second["drops"], file);
        release(subareas, data.second["subareas"], file);
        release(spells, data.second["spells"], file);
        release(favorite_subarea_id, data.second["favoriteSubareaId"], file);
        release(is_mini_boss, data.second["isMiniBoss"], file);
        release(is_quest_monster, data.second["isQuestMonster"], file);
        release(corresponding_mini_boss_id, data.second["correspondingMiniBossId"], file);
        return data;
    }
#endif
}
#endif