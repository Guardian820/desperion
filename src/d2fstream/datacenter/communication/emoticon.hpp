//  Generated by desperion protocol_builder

#ifndef d2fstream_emoticon_hpp
#define d2fstream_emoticon_hpp

namespace datacenter
{
    struct emoticon : data_holder
    {
        int32_t id;
        int32_t name_id;
        int32_t shortcut_id;
        int32_t order;
        std::string default_anim;
        bool persistancy;
        bool eight__directions;
        bool aura;
        std::vector<std::string> anims;
        int32_t weight;
        
        emoticon() = default;
        
        emoticon(const int32_t & id, const int32_t & name_id, const int32_t & shortcut_id, const int32_t & order, const std::string & default_anim, const bool & persistancy, const bool & eight__directions, const bool & aura, const std::vector<std::string> & anims, const int32_t & weight) : id { id }, name_id { name_id }, shortcut_id { shortcut_id }, order { order }, default_anim { default_anim }, persistancy { persistancy }, eight__directions { eight__directions }, aura { aura }, anims { anims }, weight { weight }
        {
        }
        
        emoticon(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(name_id, data.second.at("nameId"));
            acquire(shortcut_id, data.second.at("shortcutId"));
            acquire(order, data.second.at("order"));
            acquire(default_anim, data.second.at("defaultAnim"));
            acquire(persistancy, data.second.at("persistancy"));
            acquire(eight__directions, data.second.at("eight_directions"));
            acquire(aura, data.second.at("aura"));
            acquire(anims, data.second.at("anims"));
            acquire(weight, data.second.at("weight"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<emoticon>();
        release(id, data.second["id"], file);
        release(name_id, data.second["nameId"], file);
        release(shortcut_id, data.second["shortcutId"], file);
        release(order, data.second["order"], file);
        release(default_anim, data.second["defaultAnim"], file);
        release(persistancy, data.second["persistancy"], file);
        release(eight__directions, data.second["eight_directions"], file);
        release(aura, data.second["aura"], file);
        release(anims, data.second["anims"], file);
        release(weight, data.second["weight"], file);
        return data;
    }
#endif
}
#endif