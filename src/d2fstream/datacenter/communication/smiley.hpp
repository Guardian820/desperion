//  Generated by desperion protocol_builder

#ifndef d2fstream_smiley_hpp
#define d2fstream_smiley_hpp

namespace datacenter
{
    struct smiley : data_holder
    {
        int32_t id;
        int32_t order;
        std::string gfx_id;
        bool for_players;
        std::vector<std::string> triggers;
        
        smiley() = default;
        
        smiley(const int32_t & id, const int32_t & order, const std::string & gfx_id, const bool & for_players, const std::vector<std::string> & triggers) : id { id }, order { order }, gfx_id { gfx_id }, for_players { for_players }, triggers { triggers }
        {
        }
        
        smiley(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(order, data.second.at("order"));
            acquire(gfx_id, data.second.at("gfxId"));
            acquire(for_players, data.second.at("forPlayers"));
            acquire(triggers, data.second.at("triggers"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<smiley>();
        release(id, data.second["id"], file);
        release(order, data.second["order"], file);
        release(gfx_id, data.second["gfxId"], file);
        release(for_players, data.second["forPlayers"], file);
        release(triggers, data.second["triggers"], file);
        return data;
    }
#endif
}
#endif