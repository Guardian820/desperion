//  Generated by desperion protocol_builder

#ifndef d2fstream_sound_ui_element_hpp
#define d2fstream_sound_ui_element_hpp

namespace datacenter
{
    struct sound_ui_element : data_holder
    {
        int32_t id;
        std::string name;
        int32_t hook_id;
        std::string file;
        int32_t volume;
        
        sound_ui_element() = default;
        
        sound_ui_element(const int32_t & id, const std::string & name, const int32_t & hook_id, const std::string & file, const int32_t & volume) : id { id }, name { name }, hook_id { hook_id }, file { file }, volume { volume }
        {
        }
        
        sound_ui_element(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(name, data.second.at("name"));
            acquire(hook_id, data.second.at("hookId"));
            acquire(file, data.second.at("file"));
            acquire(volume, data.second.at("volume"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<sound_ui_element>();
        release(id, data.second["id"], file);
        release(name, data.second["name"], file);
        release(hook_id, data.second["hookId"], file);
        release(file, data.second["file"], file);
        release(volume, data.second["volume"], file);
        return data;
    }
#endif
}
#endif