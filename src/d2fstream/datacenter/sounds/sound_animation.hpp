//  Generated by desperion protocol_builder

#ifndef d2fstream_sound_animation_hpp
#define d2fstream_sound_animation_hpp

namespace datacenter
{
    struct sound_animation : data_holder
    {
        int32_t id;
        std::string name;
        std::string label;
        std::string filename;
        int32_t volume;
        int32_t rolloff;
        int32_t automation_duration;
        int32_t automation_volume;
        int32_t automation_fade_in;
        int32_t automation_fade_out;
        bool no_cut_silence;
        int32_t start_frame;
        
        sound_animation() = default;
        
        sound_animation(const int32_t & id, const std::string & name, const std::string & label, const std::string & filename, const int32_t & volume, const int32_t & rolloff, const int32_t & automation_duration, const int32_t & automation_volume, const int32_t & automation_fade_in, const int32_t & automation_fade_out, const bool & no_cut_silence, const int32_t & start_frame) : id { id }, name { name }, label { label }, filename { filename }, volume { volume }, rolloff { rolloff }, automation_duration { automation_duration }, automation_volume { automation_volume }, automation_fade_in { automation_fade_in }, automation_fade_out { automation_fade_out }, no_cut_silence { no_cut_silence }, start_frame { start_frame }
        {
        }
        
        sound_animation(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(name, data.second.at("name"));
            acquire(label, data.second.at("label"));
            acquire(filename, data.second.at("filename"));
            acquire(volume, data.second.at("volume"));
            acquire(rolloff, data.second.at("rolloff"));
            acquire(automation_duration, data.second.at("automationDuration"));
            acquire(automation_volume, data.second.at("automationVolume"));
            acquire(automation_fade_in, data.second.at("automationFadeIn"));
            acquire(automation_fade_out, data.second.at("automationFadeOut"));
            acquire(no_cut_silence, data.second.at("noCutSilence"));
            acquire(start_frame, data.second.at("startFrame"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<sound_animation>();
        release(id, data.second["id"], file);
        release(name, data.second["name"], file);
        release(label, data.second["label"], file);
        release(filename, data.second["filename"], file);
        release(volume, data.second["volume"], file);
        release(rolloff, data.second["rolloff"], file);
        release(automation_duration, data.second["automationDuration"], file);
        release(automation_volume, data.second["automationVolume"], file);
        release(automation_fade_in, data.second["automationFadeIn"], file);
        release(automation_fade_out, data.second["automationFadeOut"], file);
        release(no_cut_silence, data.second["noCutSilence"], file);
        release(start_frame, data.second["startFrame"], file);
        return data;
    }
#endif
}
#endif