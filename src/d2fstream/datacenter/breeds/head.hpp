//  Generated by desperion protocol_builder

#ifndef d2fstream_head_hpp
#define d2fstream_head_hpp

namespace datacenter
{
    struct head : data_holder
    {
        int32_t id;
        std::string skins;
        std::string asset_id;
        int32_t breed;
        int32_t gender;
        std::string label;
        int32_t order;
        
        head() = default;
        
        head(const int32_t & id, const std::string & skins, const std::string & asset_id, const int32_t & breed, const int32_t & gender, const std::string & label, const int32_t & order) : id { id }, skins { skins }, asset_id { asset_id }, breed { breed }, gender { gender }, label { label }, order { order }
        {
        }
        
        head(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(skins, data.second.at("skins"));
            acquire(asset_id, data.second.at("assetId"));
            acquire(breed, data.second.at("breed"));
            acquire(gender, data.second.at("gender"));
            acquire(label, data.second.at("label"));
            acquire(order, data.second.at("order"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<head>();
        release(id, data.second["id"], file);
        release(skins, data.second["skins"], file);
        release(asset_id, data.second["assetId"], file);
        release(breed, data.second["breed"], file);
        release(gender, data.second["gender"], file);
        release(label, data.second["label"], file);
        release(order, data.second["order"], file);
        return data;
    }
#endif
}
#endif