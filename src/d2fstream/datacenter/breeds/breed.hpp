//  Generated by desperion protocol_builder

#ifndef d2fstream_breed_hpp
#define d2fstream_breed_hpp

namespace datacenter
{
    struct breed : data_holder
    {
        int32_t id;
        int32_t short_name_id;
        int32_t long_name_id;
        int32_t description_id;
        int32_t gameplay_description_id;
        std::string male_look;
        std::string female_look;
        int32_t creature_bones_id;
        int32_t male_artwork;
        int32_t female_artwork;
        std::vector<uint32_t> stats_points_for_strength;
        std::vector<uint32_t> stats_points_for_intelligence;
        std::vector<uint32_t> stats_points_for_chance;
        std::vector<uint32_t> stats_points_for_agility;
        std::vector<uint32_t> stats_points_for_vitality;
        std::vector<uint32_t> stats_points_for_wisdom;
        std::vector<uint32_t> breed_spells_id;
        std::vector<uint32_t> male_colors;
        std::vector<uint32_t> female_colors;
        
        breed() = default;
        
        breed(const int32_t & id, const int32_t & short_name_id, const int32_t & long_name_id, const int32_t & description_id, const int32_t & gameplay_description_id, const std::string & male_look, const std::string & female_look, const int32_t & creature_bones_id, const int32_t & male_artwork, const int32_t & female_artwork, const std::vector<uint32_t> & stats_points_for_strength, const std::vector<uint32_t> & stats_points_for_intelligence, const std::vector<uint32_t> & stats_points_for_chance, const std::vector<uint32_t> & stats_points_for_agility, const std::vector<uint32_t> & stats_points_for_vitality, const std::vector<uint32_t> & stats_points_for_wisdom, const std::vector<uint32_t> & breed_spells_id, const std::vector<uint32_t> & male_colors, const std::vector<uint32_t> & female_colors) : id { id }, short_name_id { short_name_id }, long_name_id { long_name_id }, description_id { description_id }, gameplay_description_id { gameplay_description_id }, male_look { male_look }, female_look { female_look }, creature_bones_id { creature_bones_id }, male_artwork { male_artwork }, female_artwork { female_artwork }, stats_points_for_strength { stats_points_for_strength }, stats_points_for_intelligence { stats_points_for_intelligence }, stats_points_for_chance { stats_points_for_chance }, stats_points_for_agility { stats_points_for_agility }, stats_points_for_vitality { stats_points_for_vitality }, stats_points_for_wisdom { stats_points_for_wisdom }, breed_spells_id { breed_spells_id }, male_colors { male_colors }, female_colors { female_colors }
        {
        }
        
        breed(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(short_name_id, data.second.at("shortNameId"));
            acquire(long_name_id, data.second.at("longNameId"));
            acquire(description_id, data.second.at("descriptionId"));
            acquire(gameplay_description_id, data.second.at("gameplayDescriptionId"));
            acquire(male_look, data.second.at("maleLook"));
            acquire(female_look, data.second.at("femaleLook"));
            acquire(creature_bones_id, data.second.at("creatureBonesId"));
            acquire(male_artwork, data.second.at("maleArtwork"));
            acquire(female_artwork, data.second.at("femaleArtwork"));
            acquire(stats_points_for_strength, data.second.at("statsPointsForStrength"));
            acquire(stats_points_for_intelligence, data.second.at("statsPointsForIntelligence"));
            acquire(stats_points_for_chance, data.second.at("statsPointsForChance"));
            acquire(stats_points_for_agility, data.second.at("statsPointsForAgility"));
            acquire(stats_points_for_vitality, data.second.at("statsPointsForVitality"));
            acquire(stats_points_for_wisdom, data.second.at("statsPointsForWisdom"));
            acquire(breed_spells_id, data.second.at("breedSpellsId"));
            acquire(male_colors, data.second.at("maleColors"));
            acquire(female_colors, data.second.at("femaleColors"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<breed>();
        release(id, data.second["id"], file);
        release(short_name_id, data.second["shortNameId"], file);
        release(long_name_id, data.second["longNameId"], file);
        release(description_id, data.second["descriptionId"], file);
        release(gameplay_description_id, data.second["gameplayDescriptionId"], file);
        release(male_look, data.second["maleLook"], file);
        release(female_look, data.second["femaleLook"], file);
        release(creature_bones_id, data.second["creatureBonesId"], file);
        release(male_artwork, data.second["maleArtwork"], file);
        release(female_artwork, data.second["femaleArtwork"], file);
        release(stats_points_for_strength, data.second["statsPointsForStrength"], file);
        release(stats_points_for_intelligence, data.second["statsPointsForIntelligence"], file);
        release(stats_points_for_chance, data.second["statsPointsForChance"], file);
        release(stats_points_for_agility, data.second["statsPointsForAgility"], file);
        release(stats_points_for_vitality, data.second["statsPointsForVitality"], file);
        release(stats_points_for_wisdom, data.second["statsPointsForWisdom"], file);
        release(breed_spells_id, data.second["breedSpellsId"], file);
        release(male_colors, data.second["maleColors"], file);
        release(female_colors, data.second["femaleColors"], file);
        return data;
    }
#endif
}
#endif