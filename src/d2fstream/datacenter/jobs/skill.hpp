//  Generated by desperion protocol_builder

#ifndef d2fstream_skill_hpp
#define d2fstream_skill_hpp

namespace datacenter
{
    struct skill : data_holder
    {
        int32_t id;
        int32_t name_id;
        int32_t parent_job_id;
        bool is_forgemagus;
        int32_t modifiable_item_type;
        int32_t gathered_ressource_item;
        std::vector<int32_t> craftable_item_ids;
        int32_t interactive_id;
        std::string use_animation;
        bool is_repair;
        int32_t cursor;
        bool available_in_house;
        int32_t level_min;
        
        skill() = default;
        
        skill(const int32_t & id, const int32_t & name_id, const int32_t & parent_job_id, const bool & is_forgemagus, const int32_t & modifiable_item_type, const int32_t & gathered_ressource_item, const std::vector<int32_t> & craftable_item_ids, const int32_t & interactive_id, const std::string & use_animation, const bool & is_repair, const int32_t & cursor, const bool & available_in_house, const int32_t & level_min) : id { id }, name_id { name_id }, parent_job_id { parent_job_id }, is_forgemagus { is_forgemagus }, modifiable_item_type { modifiable_item_type }, gathered_ressource_item { gathered_ressource_item }, craftable_item_ids { craftable_item_ids }, interactive_id { interactive_id }, use_animation { use_animation }, is_repair { is_repair }, cursor { cursor }, available_in_house { available_in_house }, level_min { level_min }
        {
        }
        
        skill(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(name_id, data.second.at("nameId"));
            acquire(parent_job_id, data.second.at("parentJobId"));
            acquire(is_forgemagus, data.second.at("isForgemagus"));
            acquire(modifiable_item_type, data.second.at("modifiableItemType"));
            acquire(gathered_ressource_item, data.second.at("gatheredRessourceItem"));
            acquire(craftable_item_ids, data.second.at("craftableItemIds"));
            acquire(interactive_id, data.second.at("interactiveId"));
            acquire(use_animation, data.second.at("useAnimation"));
            acquire(is_repair, data.second.at("isRepair"));
            acquire(cursor, data.second.at("cursor"));
            acquire(available_in_house, data.second.at("availableInHouse"));
            acquire(level_min, data.second.at("levelMin"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<skill>();
        release(id, data.second["id"], file);
        release(name_id, data.second["nameId"], file);
        release(parent_job_id, data.second["parentJobId"], file);
        release(is_forgemagus, data.second["isForgemagus"], file);
        release(modifiable_item_type, data.second["modifiableItemType"], file);
        release(gathered_ressource_item, data.second["gatheredRessourceItem"], file);
        release(craftable_item_ids, data.second["craftableItemIds"], file);
        release(interactive_id, data.second["interactiveId"], file);
        release(use_animation, data.second["useAnimation"], file);
        release(is_repair, data.second["isRepair"], file);
        release(cursor, data.second["cursor"], file);
        release(available_in_house, data.second["availableInHouse"], file);
        release(level_min, data.second["levelMin"], file);
        return data;
    }
#endif
}
#endif