//  Generated by desperion protocol_builder

#ifndef d2fstream_job_hpp
#define d2fstream_job_hpp

namespace datacenter
{
    struct job : data_holder
    {
        int32_t id;
        int32_t name_id;
        int32_t specialization_of_id;
        int32_t icon_id;
        std::vector<int32_t> tool_ids;
        
        job() = default;
        
        job(const int32_t & id, const int32_t & name_id, const int32_t & specialization_of_id, const int32_t & icon_id, const std::vector<int32_t> & tool_ids) : id { id }, name_id { name_id }, specialization_of_id { specialization_of_id }, icon_id { icon_id }, tool_ids { tool_ids }
        {
        }
        
        job(data_object && data)
        {
            acquire(id, data.second.at("id"));
            acquire(name_id, data.second.at("nameId"));
            acquire(specialization_of_id, data.second.at("specializationOfId"));
            acquire(icon_id, data.second.at("iconId"));
            acquire(tool_ids, data.second.at("toolIds"));
        }
        
        data_object to_d2o(const d2o_writer &);
    };

#ifdef d2fstream_d2o_writer_hpp
    data_object to_d2o(const d2o_writer & file)
    {
        data_object data;
        data.first = file.get_class_id_for_type<job>();
        release(id, data.second["id"], file);
        release(name_id, data.second["nameId"], file);
        release(specialization_of_id, data.second["specializationOfId"], file);
        release(icon_id, data.second["iconId"], file);
        release(tool_ids, data.second["toolIds"], file);
        return data;
    }
#endif
}
#endif